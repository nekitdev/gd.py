{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"gd.py An API wrapper for Geometry Dash written in Python. Installing Python 3.7 or above is required. pip Installing the library with pip is quite simple: $ pip install gd.py Alternatively, the library can be installed from source: $ git clone https://github.com/nekitdev/gd.py.git $ cd gd.py $ python -m pip install . poetry You can add gd.py as a dependency with the following command: $ poetry add gd.py Or by directly specifying it in the configuration like so: [tool.poetry.dependencies] \"gd.py\" = \"^1.0.0\" Alternatively, you can add it directly from the source: [tool.poetry.dependencies.\"gd.py\"] git = \"https://github.com/nekitdev/gd.py.git\" Examples Fetching # file.py import asyncio import gd SONG_ID = 1081309 SONG = \" {} by {} (ID: {} , size: {} MB)\" async def main () -> None : client = gd . Client () song = await client . get_song ( SONG_ID ) print ( SONG . format ( song . name , song . artist . name , song . id , song . size )) asyncio . run ( main ()) $ python file.py PANDA EYES - BROKEN by PandaEyesOfficial (ID: 1081309, size: 9.71 MB) Listening import gd client = gd . Client () DAILY = \"new daily! {daily.name} by {daily.creator.name} (ID: {daily.id} )\" @client . event async def on_daily ( daily : gd . Level ) -> None : print ( DAILY . format ( daily = daily )) client . listen_for_daily () client . create_controller () . run () Documentation You can find the documentation here . Support If you need support with the library, you can send an email or refer to the official Discord server . Changelog You can find the changelog here . Security Policy You can find the Security Policy of gd.py here . Contributing If you are interested in contributing to gd.py , make sure to take a look at the Contributing Guide , as well as the Code of Conduct . License gd.py is licensed under the MIT License terms. See License for details.","title":"Index"},{"location":"#gdpy","text":"An API wrapper for Geometry Dash written in Python.","title":"gd.py"},{"location":"#installing","text":"Python 3.7 or above is required.","title":"Installing"},{"location":"#pip","text":"Installing the library with pip is quite simple: $ pip install gd.py Alternatively, the library can be installed from source: $ git clone https://github.com/nekitdev/gd.py.git $ cd gd.py $ python -m pip install .","title":"pip"},{"location":"#poetry","text":"You can add gd.py as a dependency with the following command: $ poetry add gd.py Or by directly specifying it in the configuration like so: [tool.poetry.dependencies] \"gd.py\" = \"^1.0.0\" Alternatively, you can add it directly from the source: [tool.poetry.dependencies.\"gd.py\"] git = \"https://github.com/nekitdev/gd.py.git\"","title":"poetry"},{"location":"#examples","text":"","title":"Examples"},{"location":"#fetching","text":"# file.py import asyncio import gd SONG_ID = 1081309 SONG = \" {} by {} (ID: {} , size: {} MB)\" async def main () -> None : client = gd . Client () song = await client . get_song ( SONG_ID ) print ( SONG . format ( song . name , song . artist . name , song . id , song . size )) asyncio . run ( main ()) $ python file.py PANDA EYES - BROKEN by PandaEyesOfficial (ID: 1081309, size: 9.71 MB)","title":"Fetching"},{"location":"#listening","text":"import gd client = gd . Client () DAILY = \"new daily! {daily.name} by {daily.creator.name} (ID: {daily.id} )\" @client . event async def on_daily ( daily : gd . Level ) -> None : print ( DAILY . format ( daily = daily )) client . listen_for_daily () client . create_controller () . run ()","title":"Listening"},{"location":"#documentation","text":"You can find the documentation here .","title":"Documentation"},{"location":"#support","text":"If you need support with the library, you can send an email or refer to the official Discord server .","title":"Support"},{"location":"#changelog","text":"You can find the changelog here .","title":"Changelog"},{"location":"#security-policy","text":"You can find the Security Policy of gd.py here .","title":"Security Policy"},{"location":"#contributing","text":"If you are interested in contributing to gd.py , make sure to take a look at the Contributing Guide , as well as the Code of Conduct .","title":"Contributing"},{"location":"#license","text":"gd.py is licensed under the MIT License terms. See License for details.","title":"License"},{"location":"changelog/","text":"Changelog","title":"Changelog"},{"location":"changelog/#changelog","text":"","title":"Changelog"},{"location":"code_of_conduct/","text":"Code of Conduct Our Pledge We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, or sexual identity and orientation. We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community. Our Standards Examples of behavior that contributes to a positive environment for our community include: Demonstrating empathy and kindness toward other people Being respectful of differing opinions, viewpoints, and experiences Giving and gracefully accepting constructive feedback Accepting responsibility and apologizing to those affected by our mistakes, and learning from the experience Focusing on what is best not just for us as individuals, but for the overall community Examples of unacceptable behavior include: The use of sexualized language or imagery, and sexual attention or advances of any kind Trolling, insulting or derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or email address, without their explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting Enforcement Responsibilities Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful. Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate. Scope This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official email address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Enforcement Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement to conduct@nekit.dev . All complaints will be reviewed and investigated promptly and fairly. All community leaders are obligated to respect the privacy and security of the reporter of any incident. Enforcement Guidelines Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct: 1. Correction Community Impact : Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community. Consequence : A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested. 2. Warning Community Impact : A violation through a single incident or series of actions. Consequence : A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban. 3. Temporary Ban Community Impact : A serious violation of community standards, including sustained inappropriate behavior. Consequence : A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban. 4. Permanent Ban Community Impact : Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals. Consequence : A permanent ban from any sort of public interaction within the community. Attribution This Code of Conduct is adapted from the Contributor Covenant , version 2.1, available at https://contributor-covenant.org/version/2/1/code_of_conduct . Community Impact Guidelines were inspired by Mozilla's Code of Conduct enforcement ladder . For answers to common questions about this code of conduct, see the FAQ at https://contributor-covenant.org/faq . Translations are available at https://contributor-covenant.org/translations .","title":"Code of Conduct"},{"location":"code_of_conduct/#code-of-conduct","text":"","title":"Code of Conduct"},{"location":"code_of_conduct/#our-pledge","text":"We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, or sexual identity and orientation. We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.","title":"Our Pledge"},{"location":"code_of_conduct/#our-standards","text":"Examples of behavior that contributes to a positive environment for our community include: Demonstrating empathy and kindness toward other people Being respectful of differing opinions, viewpoints, and experiences Giving and gracefully accepting constructive feedback Accepting responsibility and apologizing to those affected by our mistakes, and learning from the experience Focusing on what is best not just for us as individuals, but for the overall community Examples of unacceptable behavior include: The use of sexualized language or imagery, and sexual attention or advances of any kind Trolling, insulting or derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or email address, without their explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting","title":"Our Standards"},{"location":"code_of_conduct/#enforcement-responsibilities","text":"Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful. Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate.","title":"Enforcement Responsibilities"},{"location":"code_of_conduct/#scope","text":"This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official email address, posting via an official social media account, or acting as an appointed representative at an online or offline event.","title":"Scope"},{"location":"code_of_conduct/#enforcement","text":"Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement to conduct@nekit.dev . All complaints will be reviewed and investigated promptly and fairly. All community leaders are obligated to respect the privacy and security of the reporter of any incident.","title":"Enforcement"},{"location":"code_of_conduct/#enforcement-guidelines","text":"Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct:","title":"Enforcement Guidelines"},{"location":"code_of_conduct/#1-correction","text":"Community Impact : Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community. Consequence : A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested.","title":"1. Correction"},{"location":"code_of_conduct/#2-warning","text":"Community Impact : A violation through a single incident or series of actions. Consequence : A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban.","title":"2. Warning"},{"location":"code_of_conduct/#3-temporary-ban","text":"Community Impact : A serious violation of community standards, including sustained inappropriate behavior. Consequence : A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban.","title":"3. Temporary Ban"},{"location":"code_of_conduct/#4-permanent-ban","text":"Community Impact : Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals. Consequence : A permanent ban from any sort of public interaction within the community.","title":"4. Permanent Ban"},{"location":"code_of_conduct/#attribution","text":"This Code of Conduct is adapted from the Contributor Covenant , version 2.1, available at https://contributor-covenant.org/version/2/1/code_of_conduct . Community Impact Guidelines were inspired by Mozilla's Code of Conduct enforcement ladder . For answers to common questions about this code of conduct, see the FAQ at https://contributor-covenant.org/faq . Translations are available at https://contributor-covenant.org/translations .","title":"Attribution"},{"location":"contributing/","text":"","title":"Contributing"},{"location":"security/","text":"Security Policy Reporting Thank you for taking the time to responsibly disclose any problems you find. Do not file public issues as they are open for everyone to see! All security vulnerabilities in gd.py should be reported by email to security@nekit.dev . Your report will be acknowledged within 24 hours, and you will receive a more detailed response within 48 hours indicating the next steps in handling your report. You can encrypt your report using our public key: BB2D8194464001E0B9B60EB8741A1EAD20FFDE8A . This key is also available on MIT's Key Server and reproduced below . After the initial reply to your report, the core team will try to keep you informed of the progress being made towards a fix and official announcement. These updates will be sent at least every five days. In reality, this is more likely to be every 24-48 hours. Disclosure Policy gd.py has a 5-step disclosure process: The security report is received and is assigned a primary handler. This person will coordinate the fix and release process. The problem is confirmed and a list of all affected versions is determined. Code is audited to find any potential similar problems. Fixes are prepared for all releases which are still under maintenance. These fixes are not committed to the public repository but rather held locally pending the announcement. On the embargo date, the changes are pushed to the public repository and new builds are deployed. This process can take some time, especially when coordination is required with maintainers of other projects. Every effort will be made to handle the issue in as timely a manner as possible, however it is important that we follow the release process above to ensure that the disclosure is handled in a consistent manner. Security Key -----BEGIN PGP PUBLIC KEY BLOCK----- mQINBGKJEuEBEAC37iPX5u8sN+DZQ8c4Of+85u/hboSqNLp7VtTGgr/d8RCFhGZk 25ZwqGWeJbhnlPuzT6u96CZFRe3TMHYJR+A2NZBVjAQQjDRGbIGgaS6/9lvMLcRx D+hFQNPgwUTfPhSHIan+9EuYK/Bz+jyyIplwTrIBq1Mo0NG+cUNvAB+he22xhBQ7 y/Xal+sapHfYedqywhYEQUgP94IGURIMiBlAB7nKW+qs7YiQBShBbfxxffMgK6W6 sNNSybUQDqjj1AWkOBj5uizkA6FLF80xULypbhe1gbqsIt4d1Lj/mxI5zvj84wy5 oQ6QOpYlBUQwl8kqfszYaqKCviflA+riAFMAE8NVL+5BuVN0QSvQb6cRzIV1SL0p MCA6s2+plK/9K+JyR5yyjY7FxvatYNLW5LsubmS+YeBdO4l4A7YEElOGMexUb61H 3ejlb/9UUrZ7hd09Hsi1J6nthrI26o0XBdB8UJ9QAdfoHWka3fgSgopBBcI+S3tU iWGngFrUhiXcBS+0xHjrk4USKwFyFr8fmL4Y8Yu31ViHRFj6gVjC/PHP0apCnakB UEEMHnAQfztodH9o2ew2kew77+q9VblDGpb3BYaiptl4c6h6WBcEULpRfWERfB8H St4L49Ob6CCNpVw9qgsDfNw2fFjUIsT6OGwJxhv9StIFW2JEhgxEvfHr1wARAQAB tC9OaWtpdGEgVGlraG9ub3YgKHNlY3VyaXR5KSA8c2VjdXJpdHlAbmVraXQuZGV2 PokCUgQTAQgAPAIbAwIXgAIeBxYhBLstgZRGQAHgubYOuHQaHq0g/96KBQJiiR6G BQsJCAcCAyICAQYVCgkICwIEFgIDAQAKCRB0Gh6tIP/einfmD/9y69eqwjRfdmnW s0ph8Rh99JHtgA+zm1akRl+eymiqLuJwmZge7PPFb68Wj4lI6s1M1dIkyRuYMtIM 3rEcMmGUlcVnPldx/wdcPyhYZDUXnYCK64dsloftrWFWoSr5a/AILyVh/L6Fkf+L RU9h3KPMXhLTyK127ZF5WuzpjSJms0hDMDV/idfiDeWn/VGaZz1Wiks4l8R9kisR LI3RKNR537f0KFS8jkqlI41Lj9XQTUdqMRp+eqi/zUMM7OZzKQg1ohDsLi4MR6wa bXIu7LeAp1M0XlB+MO09KOxR8i19ST89EapAp4gHprbG5hJyV3XHK4txcWHG0YjB g5/fOvytljf/ue5YGe5nQUcxucq6i4d6jsB66Gk/4nnKutlMG2ZtVyIZZZActPZ5 qKI64HQJOpag+ERXwrv0optEhTC7RHOFRuZ4pCKuVjdJE9W7ZpAIAi8yHeVvpgJY glo+DqZH1/kLD1u2Jb/8yUuMeCYc3aBlfZswO6IeMFeXbPaMtIHzY5q7blIdKIAb YxS5KCYn8VHG6Nz8lFMu2z4jpH4QY9vTaxZnG3Xp23uxbP0pznih4DMiHIACyCBP WgRReZTCVU6Z9FvBq8t/hcrwli33lTa5hkuuzqcojn80+1g9st7DOzxVFtR2MoSS Wkv8ss8apRyeLNZAM5M8v+AiiyVCrLkCDQRiiRLhARAApEJFgvQVDMYpuo754cRK WC/17DH1BQ9y78h/0MXmOOf/0MpzJBkPjn4++BdXQGoOCBleHrWmbtmfYLcQFmZ/ eiUzxFDS/pkC7aZUb+YA7JzcwZQP2yOhlMfFK0qCoQKw/45q+AkOUR+Z+VGExkM1 5+PAcQ+7cQRiyina6/MG7FHAOcvuEwjiyt/0zBm3izeWmXL0Gngisl1jvd8bGn4T bK68q2d09NNHdXJ9UDFdGJ+FVIqJCyLyBl0ZfWazSkD/4ZNchdjFcSOzTTMvqWWn 6i5awbVyMPZkKS88vRVwTtcjk4+hrzaIyNbTw7y55qQxFe0NEoj4SK+iMwCkax19 njGQeB8GqmieC+0WYUSt10xXZ6tDf6a9F2cg6zv1ZklOuYU9x8GYwU7zvhrGhvXU Un1ZtP/OaHoQsS/+AS7KJtm/NWHGsfjd8vwDirIoZ31D7X52QrN07NQ0H7+uqtDL c7BAhsLI1G/r9Kz0+P0nC/6bMWvQWiomB1BSwUTfXLkT0RoKZ3Yub8XMk46N9XKE RtTk5x0/rZ40uOg8wzT1GvwYFA4tpavAqLejOftE05lKXAb5tQhYRupZywzXM6HN DR7CbP1e26g0p8GAuz1aFny6cN8T3wTHHyYn7aQk7i1BboV8zFpVlF6EmoHNCZtG hkl28kYa0Yvu+9mw0SPNiIsAEQEAAYkCNgQYAQgAIBYhBLstgZRGQAHgubYOuHQa Hq0g/96KBQJiiRLhAhsMAAoJEHQaHq0g/96KeCoP/3i3A629wvjPn7m3y7pTcV8p riTlH5OeXhg4jCORgJrgL4PSoeFCITA0u0djtcvctmCrHMsZe0hyH5+X+/B9Bsf6 eFQKWXLidqkxD/M6lnE6t34d17DvaWCP27MsS/f0u0FsLom11TTFgp4wGKZfRBNH vX5xuhjoYXYwZwWqCYyEXFTbsUTDce2oaqc7Yw/GmM3fCodLX0/0eYh5u2fiKA57 7VuUWD74/TkgcEOMa/IZ/jPmJHuHOteaIJR0pYUvLQ1EJh3jI4LhmH8DqxoUrmKy 8z2VM0iLIiev86EXM+yzqTpRIFnm6Ts+47L18rb9D5IUo68gr5B2bMKPOfvMVzdN /vw2RKdCVJ70nh3qqRis5RsJrn/3T8H1CQtuPvsAd/oB86YGWPpWBtpTyI+VBp+x +XR434K8D9QXFst73wTCnQwSX6j0sIotQC5GsPJEKky2Wijg3BlxqTxtYjLhwKWg x3e63TEw7IgU+lE/ybzWLJ7EndbKsC7stZh+Lyh5b3YHgI3cfJUxjZNFpniKr/Fy 4EjjLZzFf3QRmNNJ/7VlYLYztGZsOWxRsLk7QfUPSZY4iHUr8aiwfL7IFwnAlzIo 36HDjJi80UakMlf45UcxRaJwWiaj7G4x3h1D1BZLtMiypiaw/mesrithmfHg+KYu 1oYi7ft0FnZ67Wnk5+E+ =VRe2 -----END PGP PUBLIC KEY BLOCK----- Attribution This Security Policy is adapted from Rust's Security Policy .","title":"Security"},{"location":"security/#security-policy","text":"","title":"Security Policy"},{"location":"security/#reporting","text":"Thank you for taking the time to responsibly disclose any problems you find. Do not file public issues as they are open for everyone to see! All security vulnerabilities in gd.py should be reported by email to security@nekit.dev . Your report will be acknowledged within 24 hours, and you will receive a more detailed response within 48 hours indicating the next steps in handling your report. You can encrypt your report using our public key: BB2D8194464001E0B9B60EB8741A1EAD20FFDE8A . This key is also available on MIT's Key Server and reproduced below . After the initial reply to your report, the core team will try to keep you informed of the progress being made towards a fix and official announcement. These updates will be sent at least every five days. In reality, this is more likely to be every 24-48 hours.","title":"Reporting"},{"location":"security/#disclosure-policy","text":"gd.py has a 5-step disclosure process: The security report is received and is assigned a primary handler. This person will coordinate the fix and release process. The problem is confirmed and a list of all affected versions is determined. Code is audited to find any potential similar problems. Fixes are prepared for all releases which are still under maintenance. These fixes are not committed to the public repository but rather held locally pending the announcement. On the embargo date, the changes are pushed to the public repository and new builds are deployed. This process can take some time, especially when coordination is required with maintainers of other projects. Every effort will be made to handle the issue in as timely a manner as possible, however it is important that we follow the release process above to ensure that the disclosure is handled in a consistent manner.","title":"Disclosure Policy"},{"location":"security/#security-key","text":"-----BEGIN PGP PUBLIC KEY BLOCK----- mQINBGKJEuEBEAC37iPX5u8sN+DZQ8c4Of+85u/hboSqNLp7VtTGgr/d8RCFhGZk 25ZwqGWeJbhnlPuzT6u96CZFRe3TMHYJR+A2NZBVjAQQjDRGbIGgaS6/9lvMLcRx D+hFQNPgwUTfPhSHIan+9EuYK/Bz+jyyIplwTrIBq1Mo0NG+cUNvAB+he22xhBQ7 y/Xal+sapHfYedqywhYEQUgP94IGURIMiBlAB7nKW+qs7YiQBShBbfxxffMgK6W6 sNNSybUQDqjj1AWkOBj5uizkA6FLF80xULypbhe1gbqsIt4d1Lj/mxI5zvj84wy5 oQ6QOpYlBUQwl8kqfszYaqKCviflA+riAFMAE8NVL+5BuVN0QSvQb6cRzIV1SL0p MCA6s2+plK/9K+JyR5yyjY7FxvatYNLW5LsubmS+YeBdO4l4A7YEElOGMexUb61H 3ejlb/9UUrZ7hd09Hsi1J6nthrI26o0XBdB8UJ9QAdfoHWka3fgSgopBBcI+S3tU iWGngFrUhiXcBS+0xHjrk4USKwFyFr8fmL4Y8Yu31ViHRFj6gVjC/PHP0apCnakB UEEMHnAQfztodH9o2ew2kew77+q9VblDGpb3BYaiptl4c6h6WBcEULpRfWERfB8H St4L49Ob6CCNpVw9qgsDfNw2fFjUIsT6OGwJxhv9StIFW2JEhgxEvfHr1wARAQAB tC9OaWtpdGEgVGlraG9ub3YgKHNlY3VyaXR5KSA8c2VjdXJpdHlAbmVraXQuZGV2 PokCUgQTAQgAPAIbAwIXgAIeBxYhBLstgZRGQAHgubYOuHQaHq0g/96KBQJiiR6G BQsJCAcCAyICAQYVCgkICwIEFgIDAQAKCRB0Gh6tIP/einfmD/9y69eqwjRfdmnW s0ph8Rh99JHtgA+zm1akRl+eymiqLuJwmZge7PPFb68Wj4lI6s1M1dIkyRuYMtIM 3rEcMmGUlcVnPldx/wdcPyhYZDUXnYCK64dsloftrWFWoSr5a/AILyVh/L6Fkf+L RU9h3KPMXhLTyK127ZF5WuzpjSJms0hDMDV/idfiDeWn/VGaZz1Wiks4l8R9kisR LI3RKNR537f0KFS8jkqlI41Lj9XQTUdqMRp+eqi/zUMM7OZzKQg1ohDsLi4MR6wa bXIu7LeAp1M0XlB+MO09KOxR8i19ST89EapAp4gHprbG5hJyV3XHK4txcWHG0YjB g5/fOvytljf/ue5YGe5nQUcxucq6i4d6jsB66Gk/4nnKutlMG2ZtVyIZZZActPZ5 qKI64HQJOpag+ERXwrv0optEhTC7RHOFRuZ4pCKuVjdJE9W7ZpAIAi8yHeVvpgJY glo+DqZH1/kLD1u2Jb/8yUuMeCYc3aBlfZswO6IeMFeXbPaMtIHzY5q7blIdKIAb YxS5KCYn8VHG6Nz8lFMu2z4jpH4QY9vTaxZnG3Xp23uxbP0pznih4DMiHIACyCBP WgRReZTCVU6Z9FvBq8t/hcrwli33lTa5hkuuzqcojn80+1g9st7DOzxVFtR2MoSS Wkv8ss8apRyeLNZAM5M8v+AiiyVCrLkCDQRiiRLhARAApEJFgvQVDMYpuo754cRK WC/17DH1BQ9y78h/0MXmOOf/0MpzJBkPjn4++BdXQGoOCBleHrWmbtmfYLcQFmZ/ eiUzxFDS/pkC7aZUb+YA7JzcwZQP2yOhlMfFK0qCoQKw/45q+AkOUR+Z+VGExkM1 5+PAcQ+7cQRiyina6/MG7FHAOcvuEwjiyt/0zBm3izeWmXL0Gngisl1jvd8bGn4T bK68q2d09NNHdXJ9UDFdGJ+FVIqJCyLyBl0ZfWazSkD/4ZNchdjFcSOzTTMvqWWn 6i5awbVyMPZkKS88vRVwTtcjk4+hrzaIyNbTw7y55qQxFe0NEoj4SK+iMwCkax19 njGQeB8GqmieC+0WYUSt10xXZ6tDf6a9F2cg6zv1ZklOuYU9x8GYwU7zvhrGhvXU Un1ZtP/OaHoQsS/+AS7KJtm/NWHGsfjd8vwDirIoZ31D7X52QrN07NQ0H7+uqtDL c7BAhsLI1G/r9Kz0+P0nC/6bMWvQWiomB1BSwUTfXLkT0RoKZ3Yub8XMk46N9XKE RtTk5x0/rZ40uOg8wzT1GvwYFA4tpavAqLejOftE05lKXAb5tQhYRupZywzXM6HN DR7CbP1e26g0p8GAuz1aFny6cN8T3wTHHyYn7aQk7i1BboV8zFpVlF6EmoHNCZtG hkl28kYa0Yvu+9mw0SPNiIsAEQEAAYkCNgQYAQgAIBYhBLstgZRGQAHgubYOuHQa Hq0g/96KBQJiiRLhAhsMAAoJEHQaHq0g/96KeCoP/3i3A629wvjPn7m3y7pTcV8p riTlH5OeXhg4jCORgJrgL4PSoeFCITA0u0djtcvctmCrHMsZe0hyH5+X+/B9Bsf6 eFQKWXLidqkxD/M6lnE6t34d17DvaWCP27MsS/f0u0FsLom11TTFgp4wGKZfRBNH vX5xuhjoYXYwZwWqCYyEXFTbsUTDce2oaqc7Yw/GmM3fCodLX0/0eYh5u2fiKA57 7VuUWD74/TkgcEOMa/IZ/jPmJHuHOteaIJR0pYUvLQ1EJh3jI4LhmH8DqxoUrmKy 8z2VM0iLIiev86EXM+yzqTpRIFnm6Ts+47L18rb9D5IUo68gr5B2bMKPOfvMVzdN /vw2RKdCVJ70nh3qqRis5RsJrn/3T8H1CQtuPvsAd/oB86YGWPpWBtpTyI+VBp+x +XR434K8D9QXFst73wTCnQwSX6j0sIotQC5GsPJEKky2Wijg3BlxqTxtYjLhwKWg x3e63TEw7IgU+lE/ybzWLJ7EndbKsC7stZh+Lyh5b3YHgI3cfJUxjZNFpniKr/Fy 4EjjLZzFf3QRmNNJ/7VlYLYztGZsOWxRsLk7QfUPSZY4iHUr8aiwfL7IFwnAlzIo 36HDjJi80UakMlf45UcxRaJwWiaj7G4x3h1D1BZLtMiypiaw/mesrithmfHg+KYu 1oYi7ft0FnZ67Wnk5+E+ =VRe2 -----END PGP PUBLIC KEY BLOCK-----","title":"Security Key"},{"location":"security/#attribution","text":"This Security Policy is adapted from Rust's Security Policy .","title":"Attribution"},{"location":"reference/client/","text":"Client Source code in gd/client.pydefine ( slots = False ) class Client : session : Session = field ( factory = Session ) \"\"\"The session of the client.\"\"\" credentials : Credentials = field ( factory = Credentials ) \"\"\"The credentials of the client.\"\"\" database_unchecked : Optional [ Database ] = field ( default = None , repr = False ) \"\"\"The database of the client.\"\"\" load_after_post : bool = field ( default = DEFAULT_LOAD_AFTER_POST ) \"\"\"Whether to load items after posting them.\"\"\" _listeners : DynamicTuple [ Listener ] = field ( default = (), repr = False , init = False ) _controller : Optional [ Controller ] = field ( default = None , repr = False , init = False ) def apply_items ( self : C , credentials : Optional [ Credentials ] = None , database : Optional [ Database ] = None , credentials_type : Type [ Credentials ] = Credentials , ) -> C : if credentials is None : self . credentials = credentials_type () else : self . credentials = credentials self . database_unchecked = database return self @property def database ( self ) -> Database : database = self . database_unchecked if database is None : raise ValueError ( NO_DATABASE ) return database @database . setter def database ( self , database : Database ) -> None : self . database_unchecked = database @database . deleter def database ( self ) -> None : self . database_unchecked = None def reset_items ( self : C ) -> C : return self . apply_items () def is_logged_in ( self ) -> bool : \"\"\"Checks if the client is logged in. Returns: Whether the client is logged in. \"\"\" return self . credentials . is_loaded () def run ( self , awaitable : Awaitable [ T ]) -> T : return run ( awaiting ( awaitable )) @property def account_id ( self ) -> int : \"\"\"The account ID of the client.\"\"\" return self . credentials . account_id @property def id ( self ) -> int : \"\"\"The user ID of the client.\"\"\" return self . credentials . id @property def name ( self ) -> str : \"\"\"The name of the client.\"\"\" return self . credentials . name @property def password ( self ) -> str : \"\"\"The password of the client.\"\"\" return self . credentials . password @property def http ( self ) -> HTTPClient : \"\"\"The [`HTTPClient`][gd.http.HTTPClient] used by the client session.\"\"\" return self . session . http @property def encoded_password ( self ) -> str : \"\"\"The encoded password of the client.\"\"\" return encode_robtop_string ( self . password , Key . USER_PASSWORD ) @property # type: ignore @check_login def user ( self ) -> User : \"\"\"The user representing the client.\"\"\" return User ( id = self . id , name = self . name , account_id = self . account_id ) . attach_client ( self ) async def ping ( self ) -> timedelta : \"\"\"Pings the Geometry Dash server. Returns: The [`timedelta`][datetime.timedelta] representing the latency. \"\"\" return await self . ping_url ( self . http . url ) async def ping_url ( self , url : URLString ) -> timedelta : \"\"\"Pings the given `url`. Returns: The [`timedelta`][datetime.timedelta] representing the latency. \"\"\" return await self . session . ping ( url ) async def logout ( self ) -> None : \"\"\"Performs the logout.\"\"\" self . reset_items () def login ( self : C , name : str , password : str ) -> LoginContextManager [ C ]: \"\"\"Performs the login. This function returns a context manager that can be used for temporarily logging in: ```python async with client.login(name, password): assert client.is_logged_in() assert not client.is_logged_in() ``` Returns: The [`LoginContextManager`][gd.client.LoginContextManager] for handling login process. \"\"\" return LoginContextManager ( self , name , password ) async def try_login ( self , name : str , password : str ) -> None : model = await self . session . login ( name , password ) self . apply_items ( Credentials ( model . account_id , model . id , name , password )) def unsafe_login ( self : C , name : str , password : str ) -> UnsafeLoginContextManager [ C ]: \"\"\"Performs the *unsafe* login. *Unsafe* means that the credentials are not confirmed. This function returns a context manager that can be used for temporarily logging in: ```python async with client.unsafe_login(name, password): assert client.is_logged_in() assert not client.is_logged_in() ``` Returns: The [`UnsafeLoginContextManager`][gd.client.UnsafeLoginContextManager] for handling login process. \"\"\" return UnsafeLoginContextManager ( self , name , password ) async def try_unsafe_login ( self , name : str , password : str ) -> None : user = await self . search_user ( name , simple = True ) self . apply_items ( Credentials ( user . account_id , user . id , name , password )) @check_login async def load ( self ) -> Database : \"\"\"Loads the save from the cloud, saving it in the [`database`][gd.client.Client.database] attribute. Note: This function requires the client to be logged in. Returns: The [`Database`][gd.api.database.Database] loaded. \"\"\" database = await self . session . load ( account_id = self . account_id , name = self . name , password = self . password ) self . database = database return database @check_login async def save ( self , database : Optional [ Database ] = None ) -> None : \"\"\"Saves the the `database` to the cloud, optionally fetching it from the [`database`][gd.client.Client.database] attribute. Note: This function requires the client to be logged in. \"\"\" if database is None : database = self . database await self . session . save ( database , account_id = self . account_id , name = self . name , password = self . password ) async def get_account_url ( self , account_id : int , type : AccountURLType ) -> URL : return await self . session . get_account_url ( account_id = account_id , type = type ) @check_login async def update_profile ( self , stars : Optional [ int ] = None , diamonds : Optional [ int ] = None , secret_coins : Optional [ int ] = None , user_coins : Optional [ int ] = None , demons : Optional [ int ] = None , icon_type : Optional [ IconType ] = None , icon_id : Optional [ int ] = None , color_1_id : Optional [ int ] = None , color_2_id : Optional [ int ] = None , glow : Optional [ bool ] = None , cube_id : Optional [ int ] = None , ship_id : Optional [ int ] = None , ball_id : Optional [ int ] = None , ufo_id : Optional [ int ] = None , wave_id : Optional [ int ] = None , robot_id : Optional [ int ] = None , spider_id : Optional [ int ] = None , # swing_copter_id: Optional[int] = None, explosion_id : Optional [ int ] = None , special : int = DEFAULT_SPECIAL , * , set_as_user : Optional [ User ] = None , ) -> None : if set_as_user is None : user = await self . get_self () else : user = set_as_user await self . session . update_profile ( stars = switch_none ( stars , user . stars ), diamonds = switch_none ( diamonds , user . diamonds ), secret_coins = switch_none ( secret_coins , user . secret_coins ), user_coins = switch_none ( user_coins , user . user_coins ), demons = switch_none ( demons , user . demons ), icon_type = switch_none ( icon_type , user . icon_type ), icon_id = switch_none ( icon_id , user . icon_id ), color_1_id = switch_none ( color_1_id , user . color_1_id ), color_2_id = switch_none ( color_2_id , user . color_2_id ), glow = switch_none ( glow , user . glow ), cube_id = switch_none ( cube_id , user . cube_id ), ship_id = switch_none ( ship_id , user . ship_id ), ball_id = switch_none ( ball_id , user . ball_id ), ufo_id = switch_none ( ufo_id , user . ufo_id ), wave_id = switch_none ( wave_id , user . wave_id ), robot_id = switch_none ( robot_id , user . robot_id ), spider_id = switch_none ( spider_id , user . spider_id ), # swing_copter_id=switch_none(swing_copter_id, user.swing_copter_id), explosion_id = switch_none ( explosion_id , user . explosion_id ), special = special , account_id = self . account_id , name = self . name , encoded_password = self . encoded_password , ) @check_login async def update_settings ( self , message_state : Optional [ MessageState ] = None , friend_request_state : Optional [ FriendRequestState ] = None , comment_state : Optional [ CommentState ] = None , youtube : Optional [ str ] = None , twitter : Optional [ str ] = None , twitch : Optional [ str ] = None , # discord: Optional[str] = None, * , set_as_user : Optional [ User ] = None , ) -> None : if set_as_user is None : user = await self . get_self ( simple = True ) else : user = set_as_user await self . session . update_settings ( message_state = switch_none ( message_state , user . message_state ), friend_request_state = switch_none ( friend_request_state , user . friend_request_state ), comment_state = switch_none ( comment_state , user . comment_state ), youtube = switch_none ( youtube , user . youtube ), twitter = switch_none ( twitter , user . twitter ), twitch = switch_none ( twitch , user . twitch ), # discord=switch_none(discord, user.discord), account_id = self . account_id , encoded_password = self . encoded_password , ) @check_login async def get_self ( self , simple : bool = DEFAULT_SIMPLE ) -> User : \"\"\"Gets the user representing this client. This is a shorthand for: ```python await client.user.get(simple=simple) ``` See [`User.get`][gd.user.User.get] for more information. Note: This function requires the client to be logged in. Arguments: simple: Whether to fetch simple information. Returns: The [`User`][gd.user.User] representing the client. \"\"\" return await self . user . get ( simple = simple ) async def get_user ( self , account_id : int , simple : bool = DEFAULT_SIMPLE , friend_state : bool = DEFAULT_FRIEND_STATE , ) -> User : \"\"\"Fetches the user by `account_id`. Arguments: account_id: The account ID of the user to fetch. simple: Whether to fetch simple information only. friend_state: Whether to fetch friend state. Note: `friend_state` requires the client to be logged in. Returns: The [`User`][gd.user.User] fetched. \"\"\" if friend_state : # if we need to fetch friend state check_client_login ( self ) profile_model = await self . session . get_user_profile ( # request profile account_id = account_id , client_account_id = self . account_id , encoded_password = self . encoded_password , ) else : # otherwise, simply request normally profile_model = await self . session . get_user_profile ( account_id = account_id ) if simple : # if only the profile is needed, return right away return User . from_profile_model ( profile_model ) . attach_client ( self ) search_model = await self . session . search_user ( profile_model . id ) # search by ID return User . from_search_user_and_profile_models ( search_model , profile_model ) . attach_client ( self ) async def search_user ( self , query : IntString , simple : bool = DEFAULT_SIMPLE , friend_state : bool = DEFAULT_FRIEND_STATE , ) -> User : search_user_model = await self . session . search_user ( query = query ) # search using query if simple : # if only simple is required, return right away return User . from_search_user_model ( search_user_model ) if friend_state : # if friend state is requested check_client_login ( self ) # assert client is logged in profile_model = await self . session . get_user_profile ( # request profile search_user_model . account_id , client_account_id = self . account_id , encoded_password = self . encoded_password , ) else : # otherwise, request normally profile_model = await self . session . get_user_profile ( account_id = search_user_model . account_id ) return User . from_search_user_and_profile_models ( search_user_model , profile_model ) . attach_client ( self ) @wrap_async_iter async def search_users_on_page ( self , query : IntString , page : int = DEFAULT_PAGE ) -> AsyncIterator [ User ]: search_users_response_model = await self . session . search_users_on_page ( query = query , page = page ) for search_user_model in search_users_response_model . users : yield User . from_search_user_model ( search_user_model ) . attach_client ( self ) @wrap_async_iter def search_users ( self , query : IntString , pages : Iterable [ int ] = DEFAULT_PAGES , ) -> AsyncIterator [ User ]: return run_iterables ( ( self . search_users_on_page ( query = query , page = page ) . unwrap () for page in pages ), ClientError , ) @wrap_async_iter @check_login async def get_simple_relationships ( self , type : SimpleRelationshipType ) -> AsyncIterator [ User ]: try : response_model = await self . session . get_simple_relationships ( type = type , account_id = self . account_id , encoded_password = self . encoded_password , ) except NothingFound : return for model in response_model . users : yield User . from_relationship_user_model ( model ) . attach_client ( self ) @wrap_async_iter @check_login def get_friends ( self ) -> AsyncIterator [ User ]: return self . get_simple_relationships ( SimpleRelationshipType . FRIEND ) . unwrap () @wrap_async_iter @check_login def get_blocked ( self ) -> AsyncIterator [ User ]: return self . get_simple_relationships ( SimpleRelationshipType . BLOCKED ) . unwrap () @wrap_async_iter @check_login async def get_relationships ( self ) -> AsyncIterator [ Relationship ]: async for friend in self . get_friends (): yield friend . into_relationship ( RelationshipType . FRIEND ) async for blocked in self . get_blocked (): yield blocked . into_relationship ( RelationshipType . BLOCKED ) async for friend_request in self . get_friend_requests ( type = FriendRequestType . INCOMING ): yield friend_request . into_relationship () async for friend_request in self . get_friend_requests ( type = FriendRequestType . OUTGOING ): yield friend_request . into_relationship () @wrap_async_iter async def get_leaderboard ( self , strategy : LeaderboardStrategy = LeaderboardStrategy . DEFAULT , count : int = DEFAULT_COUNT , ) -> AsyncIterator [ LeaderboardUser ]: response_model = await self . session . get_leaderboard ( strategy = strategy , count = count , account_id = self . account_id , encoded_password = self . encoded_password , ) for model in response_model . users : yield LeaderboardUser . from_leaderboard_user_model ( model ) . attach_client ( self ) def level_models_from_model ( self , response_model : SearchLevelsResponseModel ) -> Iterator [ Tuple [ LevelModel , User , Song ]]: songs = ( Song . from_model ( model ) . attach_client ( self ) for model in response_model . songs ) creators = ( User . from_creator_model ( model ) . attach_client ( self ) for model in response_model . creators ) id_to_song = { song . id : song for song in songs } id_to_creator = { creator . id : creator for creator in creators } for model in response_model . levels : song = id_to_song . get ( model . custom_song_id ) if song is None : song = Song . official ( model . official_song_id , server_style = True ) . attach_client ( self ) creator = id_to_creator . get ( model . creator_id ) if creator is None : creator = User . default () . attach_client ( self ) yield ( model , creator , song ) async def get_daily ( self , use_client : bool = DEFAULT_USE_CLIENT ) -> Level : return await self . get_timely ( TimelyType . DAILY , use_client = use_client ) async def get_weekly ( self , use_client : bool = DEFAULT_USE_CLIENT ) -> Level : return await self . get_timely ( TimelyType . WEEKLY , use_client = use_client ) # async def get_event(self, use_client: bool = DEFAULT_USE_CLIENT) -> Level: # return await self.get_timely(TimelyType.EVENT, use_client=use_client) async def get_timely ( self , type : TimelyType , use_client : bool = DEFAULT_USE_CLIENT ) -> Level : timely_model = await self . session . get_timely_info ( type = type ) level = await self . get_level ( type . into_timely_id () . value ) return level . update_with_timely_model ( timely_model ) async def get_level ( self , level_id : int , get_data : bool = DEFAULT_GET_DATA , use_client : bool = DEFAULT_USE_CLIENT , ) -> Level : get_data = get_data or level_id < 0 if get_data : if use_client : check_client_login ( self ) response_model = await self . session . get_level ( level_id = level_id , account_id = self . account_id , encoded_password = self . encoded_password , ) else : response_model = await self . session . get_level ( level_id ) model = response_model . level level_id = model . id level = await self . search_levels_on_page ( level_id ) . next () if get_data : return Level . from_model ( model , level . creator , level . song ) . attach_client ( self ) return level @wrap_async_iter async def search_levels_on_page ( self , query : Optional [ MaybeIterable [ IntString ]] = None , page : int = DEFAULT_PAGE , filters : Optional [ Filters ] = None , user : Optional [ User ] = None , gauntlet : Optional [ int ] = None , ) -> AsyncIterator [ Level ]: if user is None : user_id = None else : user_id = user . id try : response_model = await self . session . search_levels_on_page ( query = query , page = page , filters = filters , user_id = user_id , gauntlet = gauntlet , client_account_id = self . account_id , client_user_id = self . id , encoded_password = self . encoded_password , ) except NothingFound : return for model , creator , song in self . level_models_from_model ( response_model ): yield Level . from_model ( model , creator , song ) . attach_client ( self ) @wrap_async_iter def search_levels ( self , query : Optional [ Union [ int , str ]] = None , pages : Iterable [ int ] = DEFAULT_PAGES , filters : Optional [ Filters ] = None , user : Optional [ User ] = None , gauntlet : Optional [ int ] = None , ) -> AsyncIterator [ Level ]: return run_iterables ( ( self . search_levels_on_page ( query = query , page = page , filters = filters , user = user , gauntlet = gauntlet , ) . unwrap () for page in pages ), ClientError , ) @check_login async def update_level_description ( self , level : Level , description : Optional [ str ]) -> None : await self . session . update_level_description ( level_id = level . id , description = description , account_id = self . account_id , encoded_password = self . encoded_password , ) async def upload_level ( self , name : str = UNNAMED , id : int = DEFAULT_ID , version : int = DEFAULT_VERSION , length : LevelLength = LevelLength . DEFAULT , official_song_id : int = DEFAULT_ID , description : str = EMPTY , song_id : int = DEFAULT_ID , original_id : int = DEFAULT_ID , two_player : bool = DEFAULT_TWO_PLAYER , privacy : LevelPrivacy = LevelPrivacy . DEFAULT , object_count : int = DEFAULT_OBJECT_COUNT , coins : int = DEFAULT_COINS , stars : int = DEFAULT_STARS , low_detail : bool = DEFAULT_LOW_DETAIL , password : Optional [ Password ] = None , recording : Optional [ Recording ] = None , editor_time : Optional [ timedelta ] = None , copies_time : Optional [ timedelta ] = None , data : bytes = EMPTY_BYTES , ) -> Level : level_id = await self . session . upload_level ( name = name , id = id , version = version , length = length , official_song_id = official_song_id , song_id = song_id , description = description , original_id = original_id , two_player = two_player , object_count = object_count , coins = coins , stars = stars , privacy = privacy , low_detail = low_detail , password = password , recording = recording , editor_time = editor_time , copies_time = copies_time , data = data , account_id = self . account_id , account_name = self . name , encoded_password = self . encoded_password , ) if self . load_after_post : return await self . get_level ( level_id ) level = Level . default () level . id = level_id return level async def report_level ( self , level : Level ) -> None : await self . session . report_level ( level . id ) @check_login async def delete_level ( self , level : Level ) -> None : await self . session . delete_level ( level_id = level . id , account_id = self . account_id , encoded_password = self . encoded_password ) @check_login async def rate_level ( self , level : Level , stars : int ) -> None : await self . session . rate_level ( level_id = level . id , stars = stars , account_id = self . account_id , encoded_password = self . encoded_password , ) @check_login async def rate_demon ( self , level : Level , rating : DemonDifficulty ) -> None : await self . session . rate_demon ( level_id = level . id , rating = rating , account_id = self . account_id , encoded_password = self . encoded_password , ) @check_login async def suggest_demon ( self , level : Level , rating : DemonDifficulty ) -> None : await self . session . suggest_demon ( level_id = level . id , rating = rating , account_id = self . account_id , encoded_password = self . encoded_password , ) @check_login async def suggest_level ( self , level : Level , stars : int , feature : bool ) -> None : return await self . session . suggest_level ( level_id = level . id , stars = stars , feature = feature , account_id = self . account_id , encoded_password = self . encoded_password , ) @wrap_async_iter @check_login async def get_level_leaderboard ( self , level : Level , strategy : LevelLeaderboardStrategy = LevelLeaderboardStrategy . ALL , ) -> AsyncIterator [ LevelLeaderboardUser ]: response_model = await self . session . get_level_leaderboard ( level_id = level . id , strategy = strategy , account_id = self . account_id , encoded_password = self . encoded_password , ) for model in response_model . users : yield LevelLeaderboardUser . from_level_leaderboard_user_model ( model ) . attach_client ( self ) @check_login async def block_user ( self , user : User ) -> None : await self . session . block_user ( account_id = user . account_id , client_account_id = self . account_id , encoded_password = self . encoded_password , ) @check_login async def unblock_user ( self , user : User ) -> None : await self . session . unblock_user ( account_id = user . account_id , client_account_id = self . account_id , encoded_password = self . encoded_password , ) @check_login async def unfriend_user ( self , user : User ) -> None : await self . session . unfriend_user ( account_id = user . account_id , client_account_id = self . account_id , encoded_password = self . encoded_password , ) @check_login async def send_message ( self , user : User , subject : Optional [ str ] = None , content : Optional [ str ] = None ) -> Optional [ Message ]: await self . session . send_message ( account_id = user . account_id , subject = subject , content = content , client_account_id = self . account_id , encoded_password = self . encoded_password , ) if self . load_after_post : if subject is None : subject = EMPTY messages = self . get_messages_on_page ( MessageType . OUTGOING ) message = await messages . find_or_none ( by_subject_and_user ( subject , user )) if message is None : return message message . content = content return message return None @check_login async def get_message ( self , message_id : int , type : MessageType ) -> Message : model = await self . session . get_message ( message_id = message_id , type = type , account_id = self . account_id , encoded_password = self . encoded_password , ) return Message . from_model ( model ) . attach_client ( self ) @check_login async def delete_message ( self , message : Message ) -> None : await self . session . delete_message ( message_id = message . id , type = message . type , account_id = self . account_id , encoded_password = self . encoded_password , ) @wrap_async_iter @check_login async def get_messages_on_page ( self , type : MessageType = MessageType . DEFAULT , page : int = DEFAULT_PAGE ) -> AsyncIterator [ Message ]: try : response_model = await self . session . get_messages_on_page ( type = type , page = page , account_id = self . account_id , encoded_password = self . encoded_password , ) except NothingFound : return for model in response_model . messages : yield Message . from_model ( model ) . attach_client ( self ) @wrap_async_iter @check_login def get_messages ( self , type : MessageType = MessageType . DEFAULT , pages : Iterable [ int ] = DEFAULT_PAGES , ) -> AsyncIterator [ Message ]: return run_iterables ( ( self . get_messages_on_page ( type = type , page = page ) . unwrap () for page in pages ), ClientError , ) @check_login async def send_friend_request ( self , user : User , message : Optional [ str ] = None ) -> Optional [ FriendRequest ]: await self . session . send_friend_request ( account_id = user . account_id , message = message , client_account_id = self . account_id , encoded_password = self . encoded_password , ) if self . load_after_post : friend_requests = self . get_friend_requests_on_page ( FriendRequestType . OUTGOING ) return await friend_requests . find_or_none ( by_user ( user )) return None @check_login async def delete_friend_request ( self , friend_request : FriendRequest ) -> None : await self . session . delete_friend_request ( account_id = friend_request . user . account_id , type = friend_request . type , client_account_id = self . account_id , encoded_password = self . encoded_password , ) @check_login async def accept_friend_request ( self , friend_request : FriendRequest ) -> None : await self . session . accept_friend_request ( account_id = friend_request . user . account_id , request_id = friend_request . id , type = friend_request . type , client_account_id = self . account_id , encoded_password = self . encoded_password , ) @check_login async def read_friend_request ( self , friend_request : FriendRequest ) -> None : await self . session . read_friend_request ( request_id = friend_request . id , account_id = self . account_id , encoded_password = self . encoded_password , ) @wrap_async_iter @check_login async def get_friend_requests_on_page ( self , type : FriendRequestType = FriendRequestType . DEFAULT , page : int = DEFAULT_PAGE , ) -> AsyncIterator [ FriendRequest ]: try : response_model = await self . session . get_friend_requests_on_page ( type = type , page = page , account_id = self . account_id , encoded_password = self . encoded_password , ) except NothingFound : return for model in response_model . friend_requests : yield FriendRequest . from_model ( model , type ) . attach_client ( self ) @wrap_async_iter @check_login def get_friend_requests ( self , type : FriendRequestType = FriendRequestType . DEFAULT , pages : Iterable [ int ] = DEFAULT_PAGES , ) -> AsyncIterator [ FriendRequest ]: return run_iterables ( ( self . get_friend_requests_on_page ( type = type , page = page ) . unwrap () for page in pages ), ClientError , ) @check_login async def like_level ( self , level : Level ) -> None : await self . session . like_level ( level . id , dislike = False , account_id = self . account_id , encoded_password = self . encoded_password , ) @check_login async def dislike_level ( self , level : Level ) -> None : await self . session . like_level ( level . id , dislike = True , account_id = self . account_id , encoded_password = self . encoded_password , ) @check_login async def like_user_comment ( self , comment : UserComment ) -> None : await self . session . like_user_comment ( comment . id , dislike = False , account_id = self . account_id , encoded_password = self . encoded_password , ) @check_login async def dislike_user_comment ( self , comment : UserComment ) -> None : await self . session . like_user_comment ( comment . id , dislike = True , account_id = self . account_id , encoded_password = self . encoded_password , ) @check_login async def like_level_comment ( self , comment : LevelComment ) -> None : await self . session . like_level_comment ( comment . id , comment . level . id , dislike = False , account_id = self . account_id , encoded_password = self . encoded_password , ) @check_login async def dislike_level_comment ( self , comment : LevelComment ) -> None : await self . session . like_level_comment ( comment . id , comment . level . id , dislike = True , account_id = self . account_id , encoded_password = self . encoded_password , ) @check_login async def post_comment ( self , content : Optional [ str ] = None ) -> Optional [ UserComment ]: comment_id = await self . session . post_user_comment ( content = content , account_id = self . account_id , account_name = self . name , encoded_password = self . encoded_password , ) if self . load_after_post : comments = self . user . get_comments_on_page () return await comments . find_or_none ( by_id ( comment_id )) return None @check_login async def post_level_comment ( self , level : Level , content : Optional [ str ] = None , record : int = DEFAULT_RECORD ) -> Optional [ LevelComment ]: comment_id = await self . session . post_level_comment ( level_id = level . id , content = content , record = record , account_id = self . account_id , account_name = self . name , encoded_password = self . encoded_password , ) if self . load_after_post : comments = level . get_comments_on_page ( count = DEFAULT_COUNT ) return await comments . find_or_none ( by_id ( comment_id )) return None @check_login async def delete_user_comment ( self , comment : UserComment ) -> None : await self . session . delete_user_comment ( comment_id = comment . id , account_id = self . account_id , encoded_password = self . encoded_password , ) @check_login async def delete_level_comment ( self , comment : LevelComment ) -> None : await self . session . delete_level_comment ( comment_id = comment . id , level_id = comment . level . id , account_id = self . account_id , encoded_password = self . encoded_password , ) @wrap_async_iter async def get_user_comments_on_page ( self , user : User , page : int = DEFAULT_PAGE , ) -> AsyncIterator [ UserComment ]: response_model = await self . session . get_user_comments_on_page ( account_id = user . account_id , page = page , ) for model in response_model . comments : yield UserComment . from_model ( model , user ) . attach_client ( self ) @wrap_async_iter def get_user_comments ( self , user : User , pages : Iterable [ int ] = DEFAULT_PAGES , ) -> AsyncIterator [ UserComment ]: return run_iterables ( ( self . get_user_comments_on_page ( user = user , page = page ) . unwrap () for page in pages ), ClientError , ) @wrap_async_iter async def get_user_level_comments_on_page ( self , user : User , count : int = COMMENT_PAGE_SIZE , page : int = DEFAULT_PAGE , strategy : CommentStrategy = CommentStrategy . DEFAULT , ) -> AsyncIterator [ LevelComment ]: try : response_model = await self . session . get_user_level_comments_on_page ( user_id = user . id , count = count , page = page , strategy = strategy , ) except NothingFound : return for model in response_model . comments : yield LevelComment . from_model ( model ) . attach_client ( self ) @wrap_async_iter def get_user_level_comments ( self , user : User , count : int = COMMENT_PAGE_SIZE , pages : Iterable [ int ] = DEFAULT_PAGES , strategy : CommentStrategy = CommentStrategy . DEFAULT , ) -> AsyncIterator [ LevelComment ]: return run_iterables ( ( self . get_user_level_comments_on_page ( user = user , count = count , page = page ) . unwrap () for page in pages ), ClientError , ) @wrap_async_iter async def get_level_comments_on_page ( self , level : Level , count : int = COMMENT_PAGE_SIZE , page : int = DEFAULT_PAGE , strategy : CommentStrategy = CommentStrategy . DEFAULT , ) -> AsyncIterator [ LevelComment ]: try : response_model = await self . session . get_level_comments_on_page ( level_id = level . id , count = count , page = page , strategy = strategy , ) except NothingFound : return for model in response_model . comments : comment = LevelComment . from_model ( model ) . attach_client ( self ) comment . level = level yield comment @wrap_async_iter def get_level_comments ( self , level : Level , count : int = COMMENT_PAGE_SIZE , pages : Iterable [ int ] = DEFAULT_PAGES , strategy : CommentStrategy = CommentStrategy . DEFAULT , ) -> AsyncIterator [ LevelComment ]: return run_iterables ( ( self . get_level_comments_on_page ( level = level , count = count , page = page , strategy = strategy ) . unwrap () for page in pages ), ClientError , ) @wrap_async_iter async def get_gauntlets ( self ) -> AsyncIterator [ Gauntlet ]: response_model = await self . session . get_gauntlets () for model in response_model . gauntlets : yield Gauntlet . from_model ( model , client = self ) @wrap_async_iter async def get_map_packs_on_page ( self , page : int = DEFAULT_PAGE ) -> AsyncIterator [ MapPack ]: response_model = await self . session . get_map_packs_on_page ( page = page ) for model in response_model . map_packs : yield MapPack . from_model ( model , client = self ) @wrap_async_iter def get_map_packs ( self , pages : Iterable [ int ] = DEFAULT_PAGES ) -> AsyncIterator [ MapPack ]: return run_iterables ( ( self . get_map_packs_on_page ( page = page ) . unwrap () for page in pages ), ClientError , ) @wrap_async_iter @check_login async def get_quests ( self ) -> AsyncIterator [ Quest ]: response_model = await self . session . get_quests ( account_id = self . account_id , encoded_password = self . encoded_password ) model = response_model . inner for quest_model in ( model . quest_1 , model . quest_2 , model . quest_3 ): yield Quest . from_model ( quest_model , seconds = model . time_left , client = self ) @wrap_async_iter @check_login async def get_chests ( self , reward_type : RewardType = RewardType . DEFAULT , chest_1_count : int = DEFAULT_CHEST_COUNT , chest_2_count : int = DEFAULT_CHEST_COUNT , ) -> AsyncIterator [ Chest ]: response_model = await self . session . get_chests ( reward_type = reward_type , chest_1_count = chest_1_count , chest_2_count = chest_2_count , account_id = self . account_id , encoded_password = self . encoded_password , ) model = response_model . inner for ( chest_model , time_left , count ) in ( ( model . chest_1 , model . chest_1_left , model . chest_1_count ), ( model . chest_2 , model . chest_2_left , model . chest_2_count ), ): yield Chest . from_model ( chest_model , seconds = time_left , count = count , client = self ) @wrap_async_iter async def get_featured_artists_on_page ( self , page : int = DEFAULT_PAGE ) -> AsyncIterator [ Artist ]: response_model = await self . session . get_featured_artists_on_page ( page = page ) for model in response_model . featured_artists : yield Song . from_model ( model , custom = True , client = self ) @wrap_async_iter def get_featured_artists ( self , pages : Iterable [ int ] = DEFAULT_PAGES ) -> AsyncIterator [ Artist ]: return run_iterables ( ( self . get_featured_artists_on_page ( page = page ) . unwrap () for page in pages ), ClientError , ) async def get_song ( self , song_id : int ) -> Song : model = await self . session . get_song ( song_id = song_id ) return Song . from_model ( model ) . attach_client ( self ) async def get_newgrounds_song ( self , song_id : int ) -> Song : model = await self . session . get_newgrounds_song ( song_id = song_id ) return Song . from_model ( model ) . attach_client ( self ) @wrap_async_iter async def search_newgrounds_songs_on_page ( self , query : str , page : int = DEFAULT_PAGE ) -> AsyncIterator [ Song ]: models = await self . session . search_newgrounds_songs_on_page ( query = query , page = page ) for model in models : yield Song . from_model ( model , custom = True , client = self ) @wrap_async_iter def search_newgrounds_songs ( self , query : str , pages : Iterable [ int ] = DEFAULT_PAGES ) -> AsyncIterator [ Song ]: return run_iterables ( ( self . search_newgrounds_songs_on_page ( query = query , page = page ) for page in pages ), ClientError , ) @wrap_async_iter async def search_newgrounds_users_on_page ( self , query : str , page : int = DEFAULT_PAGE ) -> AsyncIterator [ Author ]: data = await self . session . search_newgrounds_users_on_page ( query = query , page = page ) for part in data : yield Author . from_dict ( part , client = self ) # type: ignore @wrap_async_iter def search_newgrounds_users ( self , query : str , pages : Iterable [ int ] = DEFAULT_PAGES ) -> AsyncIterator [ Artist ]: return run_iterables ( ( self . search_newgrounds_users_on_page ( query = query , page = page ) for page in pages ), ClientError , ) @wrap_async_iter async def get_newgrounds_artist_songs_on_page ( self , artist : Artist , page : int = DEFAULT_PAGE ) -> AsyncIterator [ Song ]: models = await self . session . get_newgrounds_artist_songs_on_page ( name = name , page = page ) for model in models : yield Song . from_model ( model ) . attach_client ( self ) @wrap_async_iter def get_newgrounds_artist_songs ( self , artist : Artist , pages : Iterable [ int ] = DEFAULT_PAGES ) -> AsyncIterator [ Song ]: return run_iterables ( ( self . get_newgrounds_artist_songs_on_page ( artist = artist , page = page ) . unwrap () for page in pages ), ClientError , ) # handlers async def on_daily ( self , daily : Level ) -> None : \"\"\"Handles `daily` events. Arguments: daily: The daily level to handle. \"\"\" async def on_weekly ( self , weekly : Level ) -> None : \"\"\"Handles `weekly` events. Arguments: weekly: The weekly level to handle. \"\"\" async def on_rate ( self , level : Level ) -> None : \"\"\"Handles `rate` events. Arguments: level: The rated level to handle. \"\"\" async def on_level ( self , level : Level ) -> None : \"\"\"Handles `level` events. Arguments: level: The level to handle. \"\"\" async def on_user_level ( self , user : User , level : Level ) -> None : \"\"\"Handles `user_level` events. Arguments: user: The user to handle. level: The level to handle. \"\"\" async def on_message ( self , message : Message ) -> None : \"\"\"Handles `message` events. Arguments: message: The message to handle. \"\"\" async def on_friend_request ( self , friend_request : FriendRequest ) -> None : \"\"\"Handles `friend_request` events. Arguments: friend_request: The friend request to handle. \"\"\" async def on_level_comment ( self , level : Level , comment : LevelComment ) -> None : \"\"\"Handles `level_comment` events. Arguments: level: The level to handle. comment: The level comment to handle. \"\"\" async def on_daily_comment ( self , daily : Level , comment : LevelComment ) -> None : \"\"\"Handles `daily_comment` events. Arguments: daily: The daily level to handle. comment: The daily comment to handle. \"\"\" async def on_weekly_comment ( self , weekly : Level , comment : LevelComment ) -> None : \"\"\"Handles `weekly_comment` events. Arguments: weekly: The weekly level to handle. comment: The weekly comment to handle. \"\"\" async def on_user_comment ( self , user : User , comment : UserComment ) -> None : \"\"\"Handles `user_comment` events. Arguments: user: The user to handle. comment: The comment to handle. \"\"\" async def on_user_level_comment ( self , user : User , comment : LevelComment ) -> None : \"\"\"Handles `user_level_comment` events. Arguments: user: The user to handle. comment: The level comment to handle. \"\"\" # dispatchers async def dispatch_daily ( self , daily : Level ) -> None : \"\"\"Dispatches `daily` events via calling [`on_daily`][gd.client.Client.on_daily]. Arguments: daily: The daily level to dispatch. \"\"\" await self . on_daily ( daily ) async def dispatch_weekly ( self , weekly : Level ) -> None : \"\"\"Dispatches `weekly` events via calling [`on_weekly`][gd.client.Client.on_weekly]. Arguments: weekly: The weekly level to dispatch. \"\"\" await self . on_weekly ( weekly ) async def dispatch_rate ( self , level : Level ) -> None : \"\"\"Dispatches `rate` events via calling [`on_rate`][gd.client.Client.on_rate]. Arguments: level: The rated level to dispatch. \"\"\" await self . on_rate ( level ) async def dispatch_level ( self , level : Level ) -> None : \"\"\"Dispatches `level` events via calling [`on_level`][gd.client.Client.on_level]. Arguments: level: The level to dispatch. \"\"\" await self . on_level ( level ) async def dispatch_user_level ( self , user : User , level : Level ) -> None : \"\"\"Dispatches `user_level` events via calling [`on_user_level`][gd.client.Client.on_user_level]. Arguments: user: The user to dispatch. level: The level to dispatch. \"\"\" await self . on_user_level ( user , level ) async def dispatch_message ( self , message : Message ) -> None : \"\"\"Dispatches `message` events via calling [`on_message`][gd.client.Client.on_message]. Arguments: message: The message to dispatch. \"\"\" await self . on_message ( message ) async def dispatch_friend_request ( self , friend_request : FriendRequest ) -> None : \"\"\"Dispatches `friend_request` events via calling [`on_friend_request`][gd.client.Client.on_friend_request]. Arguments: friend_request: The friend request to dispatch. \"\"\" await self . on_friend_request ( friend_request ) async def dispatch_level_comment ( self , level : Level , comment : LevelComment ) -> None : \"\"\"Dispatches `level_comment` events via calling [`on_level_comment`][gd.client.Client.on_level_comment]. Arguments: level: The level to dispatch. comment: The level comment to dispatch. \"\"\" await self . on_level_comment ( level , comment ) async def dispatch_daily_comment ( self , daily : Level , comment : LevelComment ) -> None : \"\"\"Dispatches `level_comment` events via calling [`on_level_comment`][gd.client.Client.on_level_comment]. Arguments: level: The daily level to dispatch. comment: The daily comment to dispatch. \"\"\" await self . on_daily_comment ( daily , comment ) async def dispatch_weekly_comment ( self , weekly : Level , comment : LevelComment ) -> None : \"\"\"Dispatches `weekly_comment` events via calling [`on_weekly_comment`][gd.client.Client.on_weekly_comment]. Arguments: weekly: The weekly level to dispatch. comment: The weekly comment to dispatch. \"\"\" await self . on_weekly_comment ( weekly , comment ) async def dispatch_user_comment ( self , user : User , comment : UserComment ) -> None : \"\"\"Dispatches `user_comment` events via calling [`on_user_comment`][gd.client.Client.on_user_comment]. Arguments: user: The user to dispatch. comment: The comment to dispatch. \"\"\" await self . on_user_comment ( user , comment ) async def dispatch_user_level_comment ( self , user : User , comment : LevelComment ) -> None : \"\"\"Dispatches `user_level_comment` events via calling [`on_user_level_comment`][gd.client.Client.on_user_level_comment]. Arguments: user: The user to dispatch. comment: The level comment to dispatch. \"\"\" await self . on_user_level_comment ( user , comment ) def event ( self , function : F ) -> F : \"\"\"Registers an event handler. Example: ```python client = Client() DAILY = \"new daily! {daily.name} by {daily.creator.name} (ID: {daily.id}) @client.event async def on_daily(daily: Level) -> None: print(DAILY.format(daily=daily)) ``` Arguments: function: The function to register as an event handler. Returns: The function passed. \"\"\" set_attribute ( self , function . __name__ , function ) return function def listen_for_daily ( self , delay : float = DEFAULT_DELAY , reconnect : bool = DEFAULT_RECONNECT ) -> DailyListener : return self . add_listener ( DailyListener ( self , delay = delay , reconnect = reconnect )) def listen_for_weekly ( self , delay : float = DEFAULT_DELAY , reconnect : bool = DEFAULT_RECONNECT ) -> WeeklyListener : return self . add_listener ( WeeklyListener ( self , delay = delay , reconnect = reconnect )) def listen_for_rate ( self , pages_count : int = DEFAULT_PAGES_COUNT , delay : float = DEFAULT_DELAY , reconnect : bool = DEFAULT_RECONNECT , ) -> RateListener : return self . add_listener ( RateListener ( self , delay = delay , reconnect = reconnect , pages_count = pages_count ) ) def listen_for_level ( self , pages_count : int = DEFAULT_PAGES_COUNT , filters : Optional [ Filters ] = None , delay : float = DEFAULT_DELAY , reconnect : bool = DEFAULT_RECONNECT , ) -> LevelListener : if filters is None : filters = Filters () return self . add_listener ( LevelListener ( self , delay = delay , reconnect = reconnect , pages_count = pages_count , filters = filters , ) ) def listen_for_user_level ( self , account_id : Optional [ int ] = None , id : Optional [ int ] = None , name : Optional [ str ] = None , pages_count : int = DEFAULT_PAGES_COUNT , update : bool = DEFAULT_UPDATE , delay : float = DEFAULT_DELAY , reconnect : bool = DEFAULT_RECONNECT , ) -> UserLevelListener : return self . add_listener ( UserLevelListener ( self , delay = delay , reconnect = reconnect , account_id = account_id , id = id , name = name , pages_count = pages_count , update = update , ) ) def listen_for_message ( self , pages_count : int = DEFAULT_PAGES_COUNT , delay : float = DEFAULT_DELAY , reconnect : bool = DEFAULT_RECONNECT , ) -> MessageListener : return self . add_listener ( MessageListener ( self , delay = delay , reconnect = reconnect , pages_count = pages_count ) ) def listen_for_friend_request ( self , pages_count : int = DEFAULT_PAGES_COUNT , delay : float = DEFAULT_DELAY , reconnect : bool = DEFAULT_RECONNECT , ) -> FriendRequestListener : return self . add_listener ( FriendRequestListener ( self , delay = delay , reconnect = reconnect , pages_count = pages_count ) ) def listen_for_level_comment ( self , level_id : int , pages_count : int = DEFAULT_PAGES_COUNT , count : int = DEFAULT_COUNT , update : bool = DEFAULT_UPDATE , delay : float = DEFAULT_DELAY , reconnect : bool = DEFAULT_RECONNECT , ) -> LevelCommentListener : return self . add_listener ( LevelCommentListener ( self , delay = delay , reconnect = reconnect , level_id = level_id , pages_count = pages_count , count = count , update = update , ) ) def listen_for_daily_comment ( self , pages_count : int = DEFAULT_PAGES_COUNT , count : int = DEFAULT_COUNT , update : bool = DEFAULT_UPDATE , delay : float = DEFAULT_DELAY , reconnect : bool = DEFAULT_RECONNECT , ) -> DailyCommentListener : return self . add_listener ( DailyCommentListener ( self , delay = delay , reconnect = reconnect , pages_count = pages_count , count = count , update = update , ) ) def listen_for_weekly_comment ( self , pages_count : int = DEFAULT_PAGES_COUNT , count : int = DEFAULT_COUNT , update : bool = DEFAULT_UPDATE , delay : float = DEFAULT_DELAY , reconnect : bool = DEFAULT_RECONNECT , ) -> WeeklyCommentListener : return self . add_listener ( WeeklyCommentListener ( self , delay = delay , reconnect = reconnect , pages_count = pages_count , count = count , update = update , ) ) def listen_for_user_comment ( self , account_id : Optional [ int ] = None , id : Optional [ int ] = None , name : Optional [ str ] = None , update : bool = DEFAULT_UPDATE , delay : float = DEFAULT_DELAY , reconnect : bool = DEFAULT_RECONNECT , ) -> UserCommentListener : return self . add_listener ( UserCommentListener ( self , delay = delay , reconnect = reconnect , account_id = account_id , id = id , name = name , update = update , ) ) def listen_for_user_level_comment ( self , account_id : Optional [ int ] = None , id : Optional [ int ] = None , name : Optional [ str ] = None , update : bool = DEFAULT_UPDATE , delay : float = DEFAULT_DELAY , reconnect : bool = DEFAULT_RECONNECT , ) -> UserLevelCommentListener : return self . add_listener ( UserLevelCommentListener ( self , delay = delay , reconnect = reconnect , account_id = account_id , id = id , name = name , update = update , ) ) # listeners def add_listener ( self , listener : L ) -> L : self . check_controller () self . _listeners = ( * self . _listeners , listener ) return listener def clear_listeners ( self ) -> None : self . check_controller () self . _listeners = () def remove_listener ( self , listener : Listener ) -> bool : self . check_controller () listeners = self . _listeners length = len ( listeners ) self . _listeners = listeners = tuple ( present_listener for present_listener in listeners if present_listener is not listener ) return len ( listeners ) < length # controllers def check_controller ( self ) -> None : if self . _controller is not None : raise RuntimeError ( CONTROLLER_ALREADY_CREATED ) def create_controller ( self ) -> Controller : self . check_controller () self . _controller = controller = Controller ( self . _listeners ) return controller session : Session = field ( factory = Session ) class-attribute The session of the client. credentials : Credentials = field ( factory = Credentials ) class-attribute The credentials of the client. database_unchecked : Optional [ Database ] = field ( default = None , repr = False ) class-attribute The database of the client. load_after_post : bool = field ( default = DEFAULT_LOAD_AFTER_POST ) class-attribute Whether to load items after posting them. account_id : int property The account ID of the client. id : int property The user ID of the client. name : str property The name of the client. password : str property The password of the client. http : HTTPClient property The HTTPClient used by the client session. encoded_password : str property The encoded password of the client. user : User property The user representing the client. is_logged_in () -> bool Checks if the client is logged in. Returns: Type Description bool Whether the client is logged in. Source code in gd/client.py 218 219 220 221 222 223 224 def is_logged_in ( self ) -> bool : \"\"\"Checks if the client is logged in. Returns: Whether the client is logged in. \"\"\" return self . credentials . is_loaded () ping () -> timedelta async Pings the Geometry Dash server. Returns: Type Description timedelta The timedelta representing the latency. Source code in gd/client.py 265 266 267 268 269 270 271 async def ping ( self ) -> timedelta : \"\"\"Pings the Geometry Dash server. Returns: The [`timedelta`][datetime.timedelta] representing the latency. \"\"\" return await self . ping_url ( self . http . url ) ping_url ( url : URLString ) -> timedelta async Pings the given url . Returns: Type Description timedelta The timedelta representing the latency. Source code in gd/client.py 273 274 275 276 277 278 279 async def ping_url ( self , url : URLString ) -> timedelta : \"\"\"Pings the given `url`. Returns: The [`timedelta`][datetime.timedelta] representing the latency. \"\"\" return await self . session . ping ( url ) logout () -> None async Performs the logout. Source code in gd/client.py 281 282 283 async def logout ( self ) -> None : \"\"\"Performs the logout.\"\"\" self . reset_items () login ( name : str , password : str ) -> LoginContextManager [ C ] Performs the login. This function returns a context manager that can be used for temporarily logging in: async with client . login ( name , password ): assert client . is_logged_in () assert not client . is_logged_in () Returns: Type Description LoginContextManager [ C ] The LoginContextManager for handling login process. Source code in gd/client.py 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 def login ( self : C , name : str , password : str ) -> LoginContextManager [ C ]: \"\"\"Performs the login. This function returns a context manager that can be used for temporarily logging in: ```python async with client.login(name, password): assert client.is_logged_in() assert not client.is_logged_in() ``` Returns: The [`LoginContextManager`][gd.client.LoginContextManager] for handling login process. \"\"\" return LoginContextManager ( self , name , password ) unsafe_login ( name : str , password : str ) -> UnsafeLoginContextManager [ C ] Performs the unsafe login. Unsafe means that the credentials are not confirmed. This function returns a context manager that can be used for temporarily logging in: async with client . unsafe_login ( name , password ): assert client . is_logged_in () assert not client . is_logged_in () Returns: Type Description UnsafeLoginContextManager [ C ] The UnsafeLoginContextManager for handling login process. Source code in gd/client.py 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 def unsafe_login ( self : C , name : str , password : str ) -> UnsafeLoginContextManager [ C ]: \"\"\"Performs the *unsafe* login. *Unsafe* means that the credentials are not confirmed. This function returns a context manager that can be used for temporarily logging in: ```python async with client.unsafe_login(name, password): assert client.is_logged_in() assert not client.is_logged_in() ``` Returns: The [`UnsafeLoginContextManager`][gd.client.UnsafeLoginContextManager] for handling login process. \"\"\" return UnsafeLoginContextManager ( self , name , password ) load () -> Database async Loads the save from the cloud, saving it in the database attribute. Note This function requires the client to be logged in. Returns: Type Description Database The Database loaded. Source code in gd/client.py 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 @check_login async def load ( self ) -> Database : \"\"\"Loads the save from the cloud, saving it in the [`database`][gd.client.Client.database] attribute. Note: This function requires the client to be logged in. Returns: The [`Database`][gd.api.database.Database] loaded. \"\"\" database = await self . session . load ( account_id = self . account_id , name = self . name , password = self . password ) self . database = database return database save ( database : Optional [ Database ] = None ) -> None async Saves the the database to the cloud, optionally fetching it from the database attribute. Note This function requires the client to be logged in. Source code in gd/client.py 351 352 353 354 355 356 357 358 359 360 361 362 363 364 @check_login async def save ( self , database : Optional [ Database ] = None ) -> None : \"\"\"Saves the the `database` to the cloud, optionally fetching it from the [`database`][gd.client.Client.database] attribute. Note: This function requires the client to be logged in. \"\"\" if database is None : database = self . database await self . session . save ( database , account_id = self . account_id , name = self . name , password = self . password ) get_self ( simple : bool = DEFAULT_SIMPLE ) -> User async Gets the user representing this client. This is a shorthand for: await client . user . get ( simple = simple ) See User.get for more information. Note This function requires the client to be logged in. Parameters: Name Type Description Default simple bool Whether to fetch simple information. DEFAULT_SIMPLE Returns: Type Description User The User representing the client. Source code in gd/client.py 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 @check_login async def get_self ( self , simple : bool = DEFAULT_SIMPLE ) -> User : \"\"\"Gets the user representing this client. This is a shorthand for: ```python await client.user.get(simple=simple) ``` See [`User.get`][gd.user.User.get] for more information. Note: This function requires the client to be logged in. Arguments: simple: Whether to fetch simple information. Returns: The [`User`][gd.user.User] representing the client. \"\"\" return await self . user . get ( simple = simple ) get_user ( account_id : int , simple : bool = DEFAULT_SIMPLE , friend_state : bool = DEFAULT_FRIEND_STATE ) -> User async Fetches the user by account_id . Parameters: Name Type Description Default account_id int The account ID of the user to fetch. required simple bool Whether to fetch simple information only. DEFAULT_SIMPLE friend_state bool Whether to fetch friend state. DEFAULT_FRIEND_STATE Note friend_state requires the client to be logged in. Returns: Type Description User The User fetched. Source code in gd/client.py 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 async def get_user ( self , account_id : int , simple : bool = DEFAULT_SIMPLE , friend_state : bool = DEFAULT_FRIEND_STATE , ) -> User : \"\"\"Fetches the user by `account_id`. Arguments: account_id: The account ID of the user to fetch. simple: Whether to fetch simple information only. friend_state: Whether to fetch friend state. Note: `friend_state` requires the client to be logged in. Returns: The [`User`][gd.user.User] fetched. \"\"\" if friend_state : # if we need to fetch friend state check_client_login ( self ) profile_model = await self . session . get_user_profile ( # request profile account_id = account_id , client_account_id = self . account_id , encoded_password = self . encoded_password , ) else : # otherwise, simply request normally profile_model = await self . session . get_user_profile ( account_id = account_id ) if simple : # if only the profile is needed, return right away return User . from_profile_model ( profile_model ) . attach_client ( self ) search_model = await self . session . search_user ( profile_model . id ) # search by ID return User . from_search_user_and_profile_models ( search_model , profile_model ) . attach_client ( self ) on_daily ( daily : Level ) -> None async Handles daily events. Parameters: Name Type Description Default daily Level The daily level to handle. required Source code in gd/client.py 1422 1423 1424 1425 1426 1427 async def on_daily ( self , daily : Level ) -> None : \"\"\"Handles `daily` events. Arguments: daily: The daily level to handle. \"\"\" on_weekly ( weekly : Level ) -> None async Handles weekly events. Parameters: Name Type Description Default weekly Level The weekly level to handle. required Source code in gd/client.py 1429 1430 1431 1432 1433 1434 async def on_weekly ( self , weekly : Level ) -> None : \"\"\"Handles `weekly` events. Arguments: weekly: The weekly level to handle. \"\"\" on_rate ( level : Level ) -> None async Handles rate events. Parameters: Name Type Description Default level Level The rated level to handle. required Source code in gd/client.py 1436 1437 1438 1439 1440 1441 async def on_rate ( self , level : Level ) -> None : \"\"\"Handles `rate` events. Arguments: level: The rated level to handle. \"\"\" on_level ( level : Level ) -> None async Handles level events. Parameters: Name Type Description Default level Level The level to handle. required Source code in gd/client.py 1443 1444 1445 1446 1447 1448 async def on_level ( self , level : Level ) -> None : \"\"\"Handles `level` events. Arguments: level: The level to handle. \"\"\" on_user_level ( user : User , level : Level ) -> None async Handles user_level events. Parameters: Name Type Description Default user User The user to handle. required level Level The level to handle. required Source code in gd/client.py 1450 1451 1452 1453 1454 1455 1456 async def on_user_level ( self , user : User , level : Level ) -> None : \"\"\"Handles `user_level` events. Arguments: user: The user to handle. level: The level to handle. \"\"\" on_message ( message : Message ) -> None async Handles message events. Parameters: Name Type Description Default message Message The message to handle. required Source code in gd/client.py 1458 1459 1460 1461 1462 1463 async def on_message ( self , message : Message ) -> None : \"\"\"Handles `message` events. Arguments: message: The message to handle. \"\"\" on_friend_request ( friend_request : FriendRequest ) -> None async Handles friend_request events. Parameters: Name Type Description Default friend_request FriendRequest The friend request to handle. required Source code in gd/client.py 1465 1466 1467 1468 1469 1470 async def on_friend_request ( self , friend_request : FriendRequest ) -> None : \"\"\"Handles `friend_request` events. Arguments: friend_request: The friend request to handle. \"\"\" on_level_comment ( level : Level , comment : LevelComment ) -> None async Handles level_comment events. Parameters: Name Type Description Default level Level The level to handle. required comment LevelComment The level comment to handle. required Source code in gd/client.py 1472 1473 1474 1475 1476 1477 1478 async def on_level_comment ( self , level : Level , comment : LevelComment ) -> None : \"\"\"Handles `level_comment` events. Arguments: level: The level to handle. comment: The level comment to handle. \"\"\" on_daily_comment ( daily : Level , comment : LevelComment ) -> None async Handles daily_comment events. Parameters: Name Type Description Default daily Level The daily level to handle. required comment LevelComment The daily comment to handle. required Source code in gd/client.py 1480 1481 1482 1483 1484 1485 1486 async def on_daily_comment ( self , daily : Level , comment : LevelComment ) -> None : \"\"\"Handles `daily_comment` events. Arguments: daily: The daily level to handle. comment: The daily comment to handle. \"\"\" on_weekly_comment ( weekly : Level , comment : LevelComment ) -> None async Handles weekly_comment events. Parameters: Name Type Description Default weekly Level The weekly level to handle. required comment LevelComment The weekly comment to handle. required Source code in gd/client.py 1488 1489 1490 1491 1492 1493 1494 async def on_weekly_comment ( self , weekly : Level , comment : LevelComment ) -> None : \"\"\"Handles `weekly_comment` events. Arguments: weekly: The weekly level to handle. comment: The weekly comment to handle. \"\"\" on_user_comment ( user : User , comment : UserComment ) -> None async Handles user_comment events. Parameters: Name Type Description Default user User The user to handle. required comment UserComment The comment to handle. required Source code in gd/client.py 1496 1497 1498 1499 1500 1501 1502 async def on_user_comment ( self , user : User , comment : UserComment ) -> None : \"\"\"Handles `user_comment` events. Arguments: user: The user to handle. comment: The comment to handle. \"\"\" on_user_level_comment ( user : User , comment : LevelComment ) -> None async Handles user_level_comment events. Parameters: Name Type Description Default user User The user to handle. required comment LevelComment The level comment to handle. required Source code in gd/client.py 1504 1505 1506 1507 1508 1509 1510 async def on_user_level_comment ( self , user : User , comment : LevelComment ) -> None : \"\"\"Handles `user_level_comment` events. Arguments: user: The user to handle. comment: The level comment to handle. \"\"\" dispatch_daily ( daily : Level ) -> None async Dispatches daily events via calling on_daily . Parameters: Name Type Description Default daily Level The daily level to dispatch. required Source code in gd/client.py 1514 1515 1516 1517 1518 1519 1520 async def dispatch_daily ( self , daily : Level ) -> None : \"\"\"Dispatches `daily` events via calling [`on_daily`][gd.client.Client.on_daily]. Arguments: daily: The daily level to dispatch. \"\"\" await self . on_daily ( daily ) dispatch_weekly ( weekly : Level ) -> None async Dispatches weekly events via calling on_weekly . Parameters: Name Type Description Default weekly Level The weekly level to dispatch. required Source code in gd/client.py 1522 1523 1524 1525 1526 1527 1528 async def dispatch_weekly ( self , weekly : Level ) -> None : \"\"\"Dispatches `weekly` events via calling [`on_weekly`][gd.client.Client.on_weekly]. Arguments: weekly: The weekly level to dispatch. \"\"\" await self . on_weekly ( weekly ) dispatch_rate ( level : Level ) -> None async Dispatches rate events via calling on_rate . Parameters: Name Type Description Default level Level The rated level to dispatch. required Source code in gd/client.py 1530 1531 1532 1533 1534 1535 1536 async def dispatch_rate ( self , level : Level ) -> None : \"\"\"Dispatches `rate` events via calling [`on_rate`][gd.client.Client.on_rate]. Arguments: level: The rated level to dispatch. \"\"\" await self . on_rate ( level ) dispatch_level ( level : Level ) -> None async Dispatches level events via calling on_level . Parameters: Name Type Description Default level Level The level to dispatch. required Source code in gd/client.py 1538 1539 1540 1541 1542 1543 1544 async def dispatch_level ( self , level : Level ) -> None : \"\"\"Dispatches `level` events via calling [`on_level`][gd.client.Client.on_level]. Arguments: level: The level to dispatch. \"\"\" await self . on_level ( level ) dispatch_user_level ( user : User , level : Level ) -> None async Dispatches user_level events via calling on_user_level . Parameters: Name Type Description Default user User The user to dispatch. required level Level The level to dispatch. required Source code in gd/client.py 1546 1547 1548 1549 1550 1551 1552 1553 1554 async def dispatch_user_level ( self , user : User , level : Level ) -> None : \"\"\"Dispatches `user_level` events via calling [`on_user_level`][gd.client.Client.on_user_level]. Arguments: user: The user to dispatch. level: The level to dispatch. \"\"\" await self . on_user_level ( user , level ) dispatch_message ( message : Message ) -> None async Dispatches message events via calling on_message . Parameters: Name Type Description Default message Message The message to dispatch. required Source code in gd/client.py 1556 1557 1558 1559 1560 1561 1562 async def dispatch_message ( self , message : Message ) -> None : \"\"\"Dispatches `message` events via calling [`on_message`][gd.client.Client.on_message]. Arguments: message: The message to dispatch. \"\"\" await self . on_message ( message ) dispatch_friend_request ( friend_request : FriendRequest ) -> None async Dispatches friend_request events via calling on_friend_request . Parameters: Name Type Description Default friend_request FriendRequest The friend request to dispatch. required Source code in gd/client.py 1564 1565 1566 1567 1568 1569 1570 1571 async def dispatch_friend_request ( self , friend_request : FriendRequest ) -> None : \"\"\"Dispatches `friend_request` events via calling [`on_friend_request`][gd.client.Client.on_friend_request]. Arguments: friend_request: The friend request to dispatch. \"\"\" await self . on_friend_request ( friend_request ) dispatch_level_comment ( level : Level , comment : LevelComment ) -> None async Dispatches level_comment events via calling on_level_comment . Parameters: Name Type Description Default level Level The level to dispatch. required comment LevelComment The level comment to dispatch. required Source code in gd/client.py 1573 1574 1575 1576 1577 1578 1579 1580 1581 async def dispatch_level_comment ( self , level : Level , comment : LevelComment ) -> None : \"\"\"Dispatches `level_comment` events via calling [`on_level_comment`][gd.client.Client.on_level_comment]. Arguments: level: The level to dispatch. comment: The level comment to dispatch. \"\"\" await self . on_level_comment ( level , comment ) dispatch_daily_comment ( daily : Level , comment : LevelComment ) -> None async Dispatches level_comment events via calling on_level_comment . Parameters: Name Type Description Default level The daily level to dispatch. required comment LevelComment The daily comment to dispatch. required Source code in gd/client.py 1583 1584 1585 1586 1587 1588 1589 1590 1591 async def dispatch_daily_comment ( self , daily : Level , comment : LevelComment ) -> None : \"\"\"Dispatches `level_comment` events via calling [`on_level_comment`][gd.client.Client.on_level_comment]. Arguments: level: The daily level to dispatch. comment: The daily comment to dispatch. \"\"\" await self . on_daily_comment ( daily , comment ) dispatch_weekly_comment ( weekly : Level , comment : LevelComment ) -> None async Dispatches weekly_comment events via calling on_weekly_comment . Parameters: Name Type Description Default weekly Level The weekly level to dispatch. required comment LevelComment The weekly comment to dispatch. required Source code in gd/client.py 1593 1594 1595 1596 1597 1598 1599 1600 1601 async def dispatch_weekly_comment ( self , weekly : Level , comment : LevelComment ) -> None : \"\"\"Dispatches `weekly_comment` events via calling [`on_weekly_comment`][gd.client.Client.on_weekly_comment]. Arguments: weekly: The weekly level to dispatch. comment: The weekly comment to dispatch. \"\"\" await self . on_weekly_comment ( weekly , comment ) dispatch_user_comment ( user : User , comment : UserComment ) -> None async Dispatches user_comment events via calling on_user_comment . Parameters: Name Type Description Default user User The user to dispatch. required comment UserComment The comment to dispatch. required Source code in gd/client.py 1603 1604 1605 1606 1607 1608 1609 1610 1611 async def dispatch_user_comment ( self , user : User , comment : UserComment ) -> None : \"\"\"Dispatches `user_comment` events via calling [`on_user_comment`][gd.client.Client.on_user_comment]. Arguments: user: The user to dispatch. comment: The comment to dispatch. \"\"\" await self . on_user_comment ( user , comment ) dispatch_user_level_comment ( user : User , comment : LevelComment ) -> None async Dispatches user_level_comment events via calling on_user_level_comment . Parameters: Name Type Description Default user User The user to dispatch. required comment LevelComment The level comment to dispatch. required Source code in gd/client.py 1613 1614 1615 1616 1617 1618 1619 1620 1621 async def dispatch_user_level_comment ( self , user : User , comment : LevelComment ) -> None : \"\"\"Dispatches `user_level_comment` events via calling [`on_user_level_comment`][gd.client.Client.on_user_level_comment]. Arguments: user: The user to dispatch. comment: The level comment to dispatch. \"\"\" await self . on_user_level_comment ( user , comment ) event ( function : F ) -> F Registers an event handler. Example client = Client () DAILY = \"new daily! {daily.name} by {daily.creator.name} (ID: {daily.id} ) @client . event async def on_daily ( daily : Level ) -> None : print ( DAILY . format ( daily = daily )) Parameters: Name Type Description Default function F The function to register as an event handler. required Returns: Type Description F The function passed. Source code in gd/client.py 1623 1624 1625 1626 1627 1628 1629 1630 1631 1632 1633 1634 1635 1636 1637 1638 1639 1640 1641 1642 1643 1644 1645 def event ( self , function : F ) -> F : \"\"\"Registers an event handler. Example: ```python client = Client() DAILY = \"new daily! {daily.name} by {daily.creator.name} (ID: {daily.id}) @client.event async def on_daily(daily: Level) -> None: print(DAILY.format(daily=daily)) ``` Arguments: function: The function to register as an event handler. Returns: The function passed. \"\"\" set_attribute ( self , function . __name__ , function ) return function","title":"Client"},{"location":"reference/client/#gd.client.Client","text":"Source code in gd/client.pydefine ( slots = False ) class Client : session : Session = field ( factory = Session ) \"\"\"The session of the client.\"\"\" credentials : Credentials = field ( factory = Credentials ) \"\"\"The credentials of the client.\"\"\" database_unchecked : Optional [ Database ] = field ( default = None , repr = False ) \"\"\"The database of the client.\"\"\" load_after_post : bool = field ( default = DEFAULT_LOAD_AFTER_POST ) \"\"\"Whether to load items after posting them.\"\"\" _listeners : DynamicTuple [ Listener ] = field ( default = (), repr = False , init = False ) _controller : Optional [ Controller ] = field ( default = None , repr = False , init = False ) def apply_items ( self : C , credentials : Optional [ Credentials ] = None , database : Optional [ Database ] = None , credentials_type : Type [ Credentials ] = Credentials , ) -> C : if credentials is None : self . credentials = credentials_type () else : self . credentials = credentials self . database_unchecked = database return self @property def database ( self ) -> Database : database = self . database_unchecked if database is None : raise ValueError ( NO_DATABASE ) return database @database . setter def database ( self , database : Database ) -> None : self . database_unchecked = database @database . deleter def database ( self ) -> None : self . database_unchecked = None def reset_items ( self : C ) -> C : return self . apply_items () def is_logged_in ( self ) -> bool : \"\"\"Checks if the client is logged in. Returns: Whether the client is logged in. \"\"\" return self . credentials . is_loaded () def run ( self , awaitable : Awaitable [ T ]) -> T : return run ( awaiting ( awaitable )) @property def account_id ( self ) -> int : \"\"\"The account ID of the client.\"\"\" return self . credentials . account_id @property def id ( self ) -> int : \"\"\"The user ID of the client.\"\"\" return self . credentials . id @property def name ( self ) -> str : \"\"\"The name of the client.\"\"\" return self . credentials . name @property def password ( self ) -> str : \"\"\"The password of the client.\"\"\" return self . credentials . password @property def http ( self ) -> HTTPClient : \"\"\"The [`HTTPClient`][gd.http.HTTPClient] used by the client session.\"\"\" return self . session . http @property def encoded_password ( self ) -> str : \"\"\"The encoded password of the client.\"\"\" return encode_robtop_string ( self . password , Key . USER_PASSWORD ) @property # type: ignore @check_login def user ( self ) -> User : \"\"\"The user representing the client.\"\"\" return User ( id = self . id , name = self . name , account_id = self . account_id ) . attach_client ( self ) async def ping ( self ) -> timedelta : \"\"\"Pings the Geometry Dash server. Returns: The [`timedelta`][datetime.timedelta] representing the latency. \"\"\" return await self . ping_url ( self . http . url ) async def ping_url ( self , url : URLString ) -> timedelta : \"\"\"Pings the given `url`. Returns: The [`timedelta`][datetime.timedelta] representing the latency. \"\"\" return await self . session . ping ( url ) async def logout ( self ) -> None : \"\"\"Performs the logout.\"\"\" self . reset_items () def login ( self : C , name : str , password : str ) -> LoginContextManager [ C ]: \"\"\"Performs the login. This function returns a context manager that can be used for temporarily logging in: ```python async with client.login(name, password): assert client.is_logged_in() assert not client.is_logged_in() ``` Returns: The [`LoginContextManager`][gd.client.LoginContextManager] for handling login process. \"\"\" return LoginContextManager ( self , name , password ) async def try_login ( self , name : str , password : str ) -> None : model = await self . session . login ( name , password ) self . apply_items ( Credentials ( model . account_id , model . id , name , password )) def unsafe_login ( self : C , name : str , password : str ) -> UnsafeLoginContextManager [ C ]: \"\"\"Performs the *unsafe* login. *Unsafe* means that the credentials are not confirmed. This function returns a context manager that can be used for temporarily logging in: ```python async with client.unsafe_login(name, password): assert client.is_logged_in() assert not client.is_logged_in() ``` Returns: The [`UnsafeLoginContextManager`][gd.client.UnsafeLoginContextManager] for handling login process. \"\"\" return UnsafeLoginContextManager ( self , name , password ) async def try_unsafe_login ( self , name : str , password : str ) -> None : user = await self . search_user ( name , simple = True ) self . apply_items ( Credentials ( user . account_id , user . id , name , password )) @check_login async def load ( self ) -> Database : \"\"\"Loads the save from the cloud, saving it in the [`database`][gd.client.Client.database] attribute. Note: This function requires the client to be logged in. Returns: The [`Database`][gd.api.database.Database] loaded. \"\"\" database = await self . session . load ( account_id = self . account_id , name = self . name , password = self . password ) self . database = database return database @check_login async def save ( self , database : Optional [ Database ] = None ) -> None : \"\"\"Saves the the `database` to the cloud, optionally fetching it from the [`database`][gd.client.Client.database] attribute. Note: This function requires the client to be logged in. \"\"\" if database is None : database = self . database await self . session . save ( database , account_id = self . account_id , name = self . name , password = self . password ) async def get_account_url ( self , account_id : int , type : AccountURLType ) -> URL : return await self . session . get_account_url ( account_id = account_id , type = type ) @check_login async def update_profile ( self , stars : Optional [ int ] = None , diamonds : Optional [ int ] = None , secret_coins : Optional [ int ] = None , user_coins : Optional [ int ] = None , demons : Optional [ int ] = None , icon_type : Optional [ IconType ] = None , icon_id : Optional [ int ] = None , color_1_id : Optional [ int ] = None , color_2_id : Optional [ int ] = None , glow : Optional [ bool ] = None , cube_id : Optional [ int ] = None , ship_id : Optional [ int ] = None , ball_id : Optional [ int ] = None , ufo_id : Optional [ int ] = None , wave_id : Optional [ int ] = None , robot_id : Optional [ int ] = None , spider_id : Optional [ int ] = None , # swing_copter_id: Optional[int] = None, explosion_id : Optional [ int ] = None , special : int = DEFAULT_SPECIAL , * , set_as_user : Optional [ User ] = None , ) -> None : if set_as_user is None : user = await self . get_self () else : user = set_as_user await self . session . update_profile ( stars = switch_none ( stars , user . stars ), diamonds = switch_none ( diamonds , user . diamonds ), secret_coins = switch_none ( secret_coins , user . secret_coins ), user_coins = switch_none ( user_coins , user . user_coins ), demons = switch_none ( demons , user . demons ), icon_type = switch_none ( icon_type , user . icon_type ), icon_id = switch_none ( icon_id , user . icon_id ), color_1_id = switch_none ( color_1_id , user . color_1_id ), color_2_id = switch_none ( color_2_id , user . color_2_id ), glow = switch_none ( glow , user . glow ), cube_id = switch_none ( cube_id , user . cube_id ), ship_id = switch_none ( ship_id , user . ship_id ), ball_id = switch_none ( ball_id , user . ball_id ), ufo_id = switch_none ( ufo_id , user . ufo_id ), wave_id = switch_none ( wave_id , user . wave_id ), robot_id = switch_none ( robot_id , user . robot_id ), spider_id = switch_none ( spider_id , user . spider_id ), # swing_copter_id=switch_none(swing_copter_id, user.swing_copter_id), explosion_id = switch_none ( explosion_id , user . explosion_id ), special = special , account_id = self . account_id , name = self . name , encoded_password = self . encoded_password , ) @check_login async def update_settings ( self , message_state : Optional [ MessageState ] = None , friend_request_state : Optional [ FriendRequestState ] = None , comment_state : Optional [ CommentState ] = None , youtube : Optional [ str ] = None , twitter : Optional [ str ] = None , twitch : Optional [ str ] = None , # discord: Optional[str] = None, * , set_as_user : Optional [ User ] = None , ) -> None : if set_as_user is None : user = await self . get_self ( simple = True ) else : user = set_as_user await self . session . update_settings ( message_state = switch_none ( message_state , user . message_state ), friend_request_state = switch_none ( friend_request_state , user . friend_request_state ), comment_state = switch_none ( comment_state , user . comment_state ), youtube = switch_none ( youtube , user . youtube ), twitter = switch_none ( twitter , user . twitter ), twitch = switch_none ( twitch , user . twitch ), # discord=switch_none(discord, user.discord), account_id = self . account_id , encoded_password = self . encoded_password , ) @check_login async def get_self ( self , simple : bool = DEFAULT_SIMPLE ) -> User : \"\"\"Gets the user representing this client. This is a shorthand for: ```python await client.user.get(simple=simple) ``` See [`User.get`][gd.user.User.get] for more information. Note: This function requires the client to be logged in. Arguments: simple: Whether to fetch simple information. Returns: The [`User`][gd.user.User] representing the client. \"\"\" return await self . user . get ( simple = simple ) async def get_user ( self , account_id : int , simple : bool = DEFAULT_SIMPLE , friend_state : bool = DEFAULT_FRIEND_STATE , ) -> User : \"\"\"Fetches the user by `account_id`. Arguments: account_id: The account ID of the user to fetch. simple: Whether to fetch simple information only. friend_state: Whether to fetch friend state. Note: `friend_state` requires the client to be logged in. Returns: The [`User`][gd.user.User] fetched. \"\"\" if friend_state : # if we need to fetch friend state check_client_login ( self ) profile_model = await self . session . get_user_profile ( # request profile account_id = account_id , client_account_id = self . account_id , encoded_password = self . encoded_password , ) else : # otherwise, simply request normally profile_model = await self . session . get_user_profile ( account_id = account_id ) if simple : # if only the profile is needed, return right away return User . from_profile_model ( profile_model ) . attach_client ( self ) search_model = await self . session . search_user ( profile_model . id ) # search by ID return User . from_search_user_and_profile_models ( search_model , profile_model ) . attach_client ( self ) async def search_user ( self , query : IntString , simple : bool = DEFAULT_SIMPLE , friend_state : bool = DEFAULT_FRIEND_STATE , ) -> User : search_user_model = await self . session . search_user ( query = query ) # search using query if simple : # if only simple is required, return right away return User . from_search_user_model ( search_user_model ) if friend_state : # if friend state is requested check_client_login ( self ) # assert client is logged in profile_model = await self . session . get_user_profile ( # request profile search_user_model . account_id , client_account_id = self . account_id , encoded_password = self . encoded_password , ) else : # otherwise, request normally profile_model = await self . session . get_user_profile ( account_id = search_user_model . account_id ) return User . from_search_user_and_profile_models ( search_user_model , profile_model ) . attach_client ( self ) @wrap_async_iter async def search_users_on_page ( self , query : IntString , page : int = DEFAULT_PAGE ) -> AsyncIterator [ User ]: search_users_response_model = await self . session . search_users_on_page ( query = query , page = page ) for search_user_model in search_users_response_model . users : yield User . from_search_user_model ( search_user_model ) . attach_client ( self ) @wrap_async_iter def search_users ( self , query : IntString , pages : Iterable [ int ] = DEFAULT_PAGES , ) -> AsyncIterator [ User ]: return run_iterables ( ( self . search_users_on_page ( query = query , page = page ) . unwrap () for page in pages ), ClientError , ) @wrap_async_iter @check_login async def get_simple_relationships ( self , type : SimpleRelationshipType ) -> AsyncIterator [ User ]: try : response_model = await self . session . get_simple_relationships ( type = type , account_id = self . account_id , encoded_password = self . encoded_password , ) except NothingFound : return for model in response_model . users : yield User . from_relationship_user_model ( model ) . attach_client ( self ) @wrap_async_iter @check_login def get_friends ( self ) -> AsyncIterator [ User ]: return self . get_simple_relationships ( SimpleRelationshipType . FRIEND ) . unwrap () @wrap_async_iter @check_login def get_blocked ( self ) -> AsyncIterator [ User ]: return self . get_simple_relationships ( SimpleRelationshipType . BLOCKED ) . unwrap () @wrap_async_iter @check_login async def get_relationships ( self ) -> AsyncIterator [ Relationship ]: async for friend in self . get_friends (): yield friend . into_relationship ( RelationshipType . FRIEND ) async for blocked in self . get_blocked (): yield blocked . into_relationship ( RelationshipType . BLOCKED ) async for friend_request in self . get_friend_requests ( type = FriendRequestType . INCOMING ): yield friend_request . into_relationship () async for friend_request in self . get_friend_requests ( type = FriendRequestType . OUTGOING ): yield friend_request . into_relationship () @wrap_async_iter async def get_leaderboard ( self , strategy : LeaderboardStrategy = LeaderboardStrategy . DEFAULT , count : int = DEFAULT_COUNT , ) -> AsyncIterator [ LeaderboardUser ]: response_model = await self . session . get_leaderboard ( strategy = strategy , count = count , account_id = self . account_id , encoded_password = self . encoded_password , ) for model in response_model . users : yield LeaderboardUser . from_leaderboard_user_model ( model ) . attach_client ( self ) def level_models_from_model ( self , response_model : SearchLevelsResponseModel ) -> Iterator [ Tuple [ LevelModel , User , Song ]]: songs = ( Song . from_model ( model ) . attach_client ( self ) for model in response_model . songs ) creators = ( User . from_creator_model ( model ) . attach_client ( self ) for model in response_model . creators ) id_to_song = { song . id : song for song in songs } id_to_creator = { creator . id : creator for creator in creators } for model in response_model . levels : song = id_to_song . get ( model . custom_song_id ) if song is None : song = Song . official ( model . official_song_id , server_style = True ) . attach_client ( self ) creator = id_to_creator . get ( model . creator_id ) if creator is None : creator = User . default () . attach_client ( self ) yield ( model , creator , song ) async def get_daily ( self , use_client : bool = DEFAULT_USE_CLIENT ) -> Level : return await self . get_timely ( TimelyType . DAILY , use_client = use_client ) async def get_weekly ( self , use_client : bool = DEFAULT_USE_CLIENT ) -> Level : return await self . get_timely ( TimelyType . WEEKLY , use_client = use_client ) # async def get_event(self, use_client: bool = DEFAULT_USE_CLIENT) -> Level: # return await self.get_timely(TimelyType.EVENT, use_client=use_client) async def get_timely ( self , type : TimelyType , use_client : bool = DEFAULT_USE_CLIENT ) -> Level : timely_model = await self . session . get_timely_info ( type = type ) level = await self . get_level ( type . into_timely_id () . value ) return level . update_with_timely_model ( timely_model ) async def get_level ( self , level_id : int , get_data : bool = DEFAULT_GET_DATA , use_client : bool = DEFAULT_USE_CLIENT , ) -> Level : get_data = get_data or level_id < 0 if get_data : if use_client : check_client_login ( self ) response_model = await self . session . get_level ( level_id = level_id , account_id = self . account_id , encoded_password = self . encoded_password , ) else : response_model = await self . session . get_level ( level_id ) model = response_model . level level_id = model . id level = await self . search_levels_on_page ( level_id ) . next () if get_data : return Level . from_model ( model , level . creator , level . song ) . attach_client ( self ) return level @wrap_async_iter async def search_levels_on_page ( self , query : Optional [ MaybeIterable [ IntString ]] = None , page : int = DEFAULT_PAGE , filters : Optional [ Filters ] = None , user : Optional [ User ] = None , gauntlet : Optional [ int ] = None , ) -> AsyncIterator [ Level ]: if user is None : user_id = None else : user_id = user . id try : response_model = await self . session . search_levels_on_page ( query = query , page = page , filters = filters , user_id = user_id , gauntlet = gauntlet , client_account_id = self . account_id , client_user_id = self . id , encoded_password = self . encoded_password , ) except NothingFound : return for model , creator , song in self . level_models_from_model ( response_model ): yield Level . from_model ( model , creator , song ) . attach_client ( self ) @wrap_async_iter def search_levels ( self , query : Optional [ Union [ int , str ]] = None , pages : Iterable [ int ] = DEFAULT_PAGES , filters : Optional [ Filters ] = None , user : Optional [ User ] = None , gauntlet : Optional [ int ] = None , ) -> AsyncIterator [ Level ]: return run_iterables ( ( self . search_levels_on_page ( query = query , page = page , filters = filters , user = user , gauntlet = gauntlet , ) . unwrap () for page in pages ), ClientError , ) @check_login async def update_level_description ( self , level : Level , description : Optional [ str ]) -> None : await self . session . update_level_description ( level_id = level . id , description = description , account_id = self . account_id , encoded_password = self . encoded_password , ) async def upload_level ( self , name : str = UNNAMED , id : int = DEFAULT_ID , version : int = DEFAULT_VERSION , length : LevelLength = LevelLength . DEFAULT , official_song_id : int = DEFAULT_ID , description : str = EMPTY , song_id : int = DEFAULT_ID , original_id : int = DEFAULT_ID , two_player : bool = DEFAULT_TWO_PLAYER , privacy : LevelPrivacy = LevelPrivacy . DEFAULT , object_count : int = DEFAULT_OBJECT_COUNT , coins : int = DEFAULT_COINS , stars : int = DEFAULT_STARS , low_detail : bool = DEFAULT_LOW_DETAIL , password : Optional [ Password ] = None , recording : Optional [ Recording ] = None , editor_time : Optional [ timedelta ] = None , copies_time : Optional [ timedelta ] = None , data : bytes = EMPTY_BYTES , ) -> Level : level_id = await self . session . upload_level ( name = name , id = id , version = version , length = length , official_song_id = official_song_id , song_id = song_id , description = description , original_id = original_id , two_player = two_player , object_count = object_count , coins = coins , stars = stars , privacy = privacy , low_detail = low_detail , password = password , recording = recording , editor_time = editor_time , copies_time = copies_time , data = data , account_id = self . account_id , account_name = self . name , encoded_password = self . encoded_password , ) if self . load_after_post : return await self . get_level ( level_id ) level = Level . default () level . id = level_id return level async def report_level ( self , level : Level ) -> None : await self . session . report_level ( level . id ) @check_login async def delete_level ( self , level : Level ) -> None : await self . session . delete_level ( level_id = level . id , account_id = self . account_id , encoded_password = self . encoded_password ) @check_login async def rate_level ( self , level : Level , stars : int ) -> None : await self . session . rate_level ( level_id = level . id , stars = stars , account_id = self . account_id , encoded_password = self . encoded_password , ) @check_login async def rate_demon ( self , level : Level , rating : DemonDifficulty ) -> None : await self . session . rate_demon ( level_id = level . id , rating = rating , account_id = self . account_id , encoded_password = self . encoded_password , ) @check_login async def suggest_demon ( self , level : Level , rating : DemonDifficulty ) -> None : await self . session . suggest_demon ( level_id = level . id , rating = rating , account_id = self . account_id , encoded_password = self . encoded_password , ) @check_login async def suggest_level ( self , level : Level , stars : int , feature : bool ) -> None : return await self . session . suggest_level ( level_id = level . id , stars = stars , feature = feature , account_id = self . account_id , encoded_password = self . encoded_password , ) @wrap_async_iter @check_login async def get_level_leaderboard ( self , level : Level , strategy : LevelLeaderboardStrategy = LevelLeaderboardStrategy . ALL , ) -> AsyncIterator [ LevelLeaderboardUser ]: response_model = await self . session . get_level_leaderboard ( level_id = level . id , strategy = strategy , account_id = self . account_id , encoded_password = self . encoded_password , ) for model in response_model . users : yield LevelLeaderboardUser . from_level_leaderboard_user_model ( model ) . attach_client ( self ) @check_login async def block_user ( self , user : User ) -> None : await self . session . block_user ( account_id = user . account_id , client_account_id = self . account_id , encoded_password = self . encoded_password , ) @check_login async def unblock_user ( self , user : User ) -> None : await self . session . unblock_user ( account_id = user . account_id , client_account_id = self . account_id , encoded_password = self . encoded_password , ) @check_login async def unfriend_user ( self , user : User ) -> None : await self . session . unfriend_user ( account_id = user . account_id , client_account_id = self . account_id , encoded_password = self . encoded_password , ) @check_login async def send_message ( self , user : User , subject : Optional [ str ] = None , content : Optional [ str ] = None ) -> Optional [ Message ]: await self . session . send_message ( account_id = user . account_id , subject = subject , content = content , client_account_id = self . account_id , encoded_password = self . encoded_password , ) if self . load_after_post : if subject is None : subject = EMPTY messages = self . get_messages_on_page ( MessageType . OUTGOING ) message = await messages . find_or_none ( by_subject_and_user ( subject , user )) if message is None : return message message . content = content return message return None @check_login async def get_message ( self , message_id : int , type : MessageType ) -> Message : model = await self . session . get_message ( message_id = message_id , type = type , account_id = self . account_id , encoded_password = self . encoded_password , ) return Message . from_model ( model ) . attach_client ( self ) @check_login async def delete_message ( self , message : Message ) -> None : await self . session . delete_message ( message_id = message . id , type = message . type , account_id = self . account_id , encoded_password = self . encoded_password , ) @wrap_async_iter @check_login async def get_messages_on_page ( self , type : MessageType = MessageType . DEFAULT , page : int = DEFAULT_PAGE ) -> AsyncIterator [ Message ]: try : response_model = await self . session . get_messages_on_page ( type = type , page = page , account_id = self . account_id , encoded_password = self . encoded_password , ) except NothingFound : return for model in response_model . messages : yield Message . from_model ( model ) . attach_client ( self ) @wrap_async_iter @check_login def get_messages ( self , type : MessageType = MessageType . DEFAULT , pages : Iterable [ int ] = DEFAULT_PAGES , ) -> AsyncIterator [ Message ]: return run_iterables ( ( self . get_messages_on_page ( type = type , page = page ) . unwrap () for page in pages ), ClientError , ) @check_login async def send_friend_request ( self , user : User , message : Optional [ str ] = None ) -> Optional [ FriendRequest ]: await self . session . send_friend_request ( account_id = user . account_id , message = message , client_account_id = self . account_id , encoded_password = self . encoded_password , ) if self . load_after_post : friend_requests = self . get_friend_requests_on_page ( FriendRequestType . OUTGOING ) return await friend_requests . find_or_none ( by_user ( user )) return None @check_login async def delete_friend_request ( self , friend_request : FriendRequest ) -> None : await self . session . delete_friend_request ( account_id = friend_request . user . account_id , type = friend_request . type , client_account_id = self . account_id , encoded_password = self . encoded_password , ) @check_login async def accept_friend_request ( self , friend_request : FriendRequest ) -> None : await self . session . accept_friend_request ( account_id = friend_request . user . account_id , request_id = friend_request . id , type = friend_request . type , client_account_id = self . account_id , encoded_password = self . encoded_password , ) @check_login async def read_friend_request ( self , friend_request : FriendRequest ) -> None : await self . session . read_friend_request ( request_id = friend_request . id , account_id = self . account_id , encoded_password = self . encoded_password , ) @wrap_async_iter @check_login async def get_friend_requests_on_page ( self , type : FriendRequestType = FriendRequestType . DEFAULT , page : int = DEFAULT_PAGE , ) -> AsyncIterator [ FriendRequest ]: try : response_model = await self . session . get_friend_requests_on_page ( type = type , page = page , account_id = self . account_id , encoded_password = self . encoded_password , ) except NothingFound : return for model in response_model . friend_requests : yield FriendRequest . from_model ( model , type ) . attach_client ( self ) @wrap_async_iter @check_login def get_friend_requests ( self , type : FriendRequestType = FriendRequestType . DEFAULT , pages : Iterable [ int ] = DEFAULT_PAGES , ) -> AsyncIterator [ FriendRequest ]: return run_iterables ( ( self . get_friend_requests_on_page ( type = type , page = page ) . unwrap () for page in pages ), ClientError , ) @check_login async def like_level ( self , level : Level ) -> None : await self . session . like_level ( level . id , dislike = False , account_id = self . account_id , encoded_password = self . encoded_password , ) @check_login async def dislike_level ( self , level : Level ) -> None : await self . session . like_level ( level . id , dislike = True , account_id = self . account_id , encoded_password = self . encoded_password , ) @check_login async def like_user_comment ( self , comment : UserComment ) -> None : await self . session . like_user_comment ( comment . id , dislike = False , account_id = self . account_id , encoded_password = self . encoded_password , ) @check_login async def dislike_user_comment ( self , comment : UserComment ) -> None : await self . session . like_user_comment ( comment . id , dislike = True , account_id = self . account_id , encoded_password = self . encoded_password , ) @check_login async def like_level_comment ( self , comment : LevelComment ) -> None : await self . session . like_level_comment ( comment . id , comment . level . id , dislike = False , account_id = self . account_id , encoded_password = self . encoded_password , ) @check_login async def dislike_level_comment ( self , comment : LevelComment ) -> None : await self . session . like_level_comment ( comment . id , comment . level . id , dislike = True , account_id = self . account_id , encoded_password = self . encoded_password , ) @check_login async def post_comment ( self , content : Optional [ str ] = None ) -> Optional [ UserComment ]: comment_id = await self . session . post_user_comment ( content = content , account_id = self . account_id , account_name = self . name , encoded_password = self . encoded_password , ) if self . load_after_post : comments = self . user . get_comments_on_page () return await comments . find_or_none ( by_id ( comment_id )) return None @check_login async def post_level_comment ( self , level : Level , content : Optional [ str ] = None , record : int = DEFAULT_RECORD ) -> Optional [ LevelComment ]: comment_id = await self . session . post_level_comment ( level_id = level . id , content = content , record = record , account_id = self . account_id , account_name = self . name , encoded_password = self . encoded_password , ) if self . load_after_post : comments = level . get_comments_on_page ( count = DEFAULT_COUNT ) return await comments . find_or_none ( by_id ( comment_id )) return None @check_login async def delete_user_comment ( self , comment : UserComment ) -> None : await self . session . delete_user_comment ( comment_id = comment . id , account_id = self . account_id , encoded_password = self . encoded_password , ) @check_login async def delete_level_comment ( self , comment : LevelComment ) -> None : await self . session . delete_level_comment ( comment_id = comment . id , level_id = comment . level . id , account_id = self . account_id , encoded_password = self . encoded_password , ) @wrap_async_iter async def get_user_comments_on_page ( self , user : User , page : int = DEFAULT_PAGE , ) -> AsyncIterator [ UserComment ]: response_model = await self . session . get_user_comments_on_page ( account_id = user . account_id , page = page , ) for model in response_model . comments : yield UserComment . from_model ( model , user ) . attach_client ( self ) @wrap_async_iter def get_user_comments ( self , user : User , pages : Iterable [ int ] = DEFAULT_PAGES , ) -> AsyncIterator [ UserComment ]: return run_iterables ( ( self . get_user_comments_on_page ( user = user , page = page ) . unwrap () for page in pages ), ClientError , ) @wrap_async_iter async def get_user_level_comments_on_page ( self , user : User , count : int = COMMENT_PAGE_SIZE , page : int = DEFAULT_PAGE , strategy : CommentStrategy = CommentStrategy . DEFAULT , ) -> AsyncIterator [ LevelComment ]: try : response_model = await self . session . get_user_level_comments_on_page ( user_id = user . id , count = count , page = page , strategy = strategy , ) except NothingFound : return for model in response_model . comments : yield LevelComment . from_model ( model ) . attach_client ( self ) @wrap_async_iter def get_user_level_comments ( self , user : User , count : int = COMMENT_PAGE_SIZE , pages : Iterable [ int ] = DEFAULT_PAGES , strategy : CommentStrategy = CommentStrategy . DEFAULT , ) -> AsyncIterator [ LevelComment ]: return run_iterables ( ( self . get_user_level_comments_on_page ( user = user , count = count , page = page ) . unwrap () for page in pages ), ClientError , ) @wrap_async_iter async def get_level_comments_on_page ( self , level : Level , count : int = COMMENT_PAGE_SIZE , page : int = DEFAULT_PAGE , strategy : CommentStrategy = CommentStrategy . DEFAULT , ) -> AsyncIterator [ LevelComment ]: try : response_model = await self . session . get_level_comments_on_page ( level_id = level . id , count = count , page = page , strategy = strategy , ) except NothingFound : return for model in response_model . comments : comment = LevelComment . from_model ( model ) . attach_client ( self ) comment . level = level yield comment @wrap_async_iter def get_level_comments ( self , level : Level , count : int = COMMENT_PAGE_SIZE , pages : Iterable [ int ] = DEFAULT_PAGES , strategy : CommentStrategy = CommentStrategy . DEFAULT , ) -> AsyncIterator [ LevelComment ]: return run_iterables ( ( self . get_level_comments_on_page ( level = level , count = count , page = page , strategy = strategy ) . unwrap () for page in pages ), ClientError , ) @wrap_async_iter async def get_gauntlets ( self ) -> AsyncIterator [ Gauntlet ]: response_model = await self . session . get_gauntlets () for model in response_model . gauntlets : yield Gauntlet . from_model ( model , client = self ) @wrap_async_iter async def get_map_packs_on_page ( self , page : int = DEFAULT_PAGE ) -> AsyncIterator [ MapPack ]: response_model = await self . session . get_map_packs_on_page ( page = page ) for model in response_model . map_packs : yield MapPack . from_model ( model , client = self ) @wrap_async_iter def get_map_packs ( self , pages : Iterable [ int ] = DEFAULT_PAGES ) -> AsyncIterator [ MapPack ]: return run_iterables ( ( self . get_map_packs_on_page ( page = page ) . unwrap () for page in pages ), ClientError , ) @wrap_async_iter @check_login async def get_quests ( self ) -> AsyncIterator [ Quest ]: response_model = await self . session . get_quests ( account_id = self . account_id , encoded_password = self . encoded_password ) model = response_model . inner for quest_model in ( model . quest_1 , model . quest_2 , model . quest_3 ): yield Quest . from_model ( quest_model , seconds = model . time_left , client = self ) @wrap_async_iter @check_login async def get_chests ( self , reward_type : RewardType = RewardType . DEFAULT , chest_1_count : int = DEFAULT_CHEST_COUNT , chest_2_count : int = DEFAULT_CHEST_COUNT , ) -> AsyncIterator [ Chest ]: response_model = await self . session . get_chests ( reward_type = reward_type , chest_1_count = chest_1_count , chest_2_count = chest_2_count , account_id = self . account_id , encoded_password = self . encoded_password , ) model = response_model . inner for ( chest_model , time_left , count ) in ( ( model . chest_1 , model . chest_1_left , model . chest_1_count ), ( model . chest_2 , model . chest_2_left , model . chest_2_count ), ): yield Chest . from_model ( chest_model , seconds = time_left , count = count , client = self ) @wrap_async_iter async def get_featured_artists_on_page ( self , page : int = DEFAULT_PAGE ) -> AsyncIterator [ Artist ]: response_model = await self . session . get_featured_artists_on_page ( page = page ) for model in response_model . featured_artists : yield Song . from_model ( model , custom = True , client = self ) @wrap_async_iter def get_featured_artists ( self , pages : Iterable [ int ] = DEFAULT_PAGES ) -> AsyncIterator [ Artist ]: return run_iterables ( ( self . get_featured_artists_on_page ( page = page ) . unwrap () for page in pages ), ClientError , ) async def get_song ( self , song_id : int ) -> Song : model = await self . session . get_song ( song_id = song_id ) return Song . from_model ( model ) . attach_client ( self ) async def get_newgrounds_song ( self , song_id : int ) -> Song : model = await self . session . get_newgrounds_song ( song_id = song_id ) return Song . from_model ( model ) . attach_client ( self ) @wrap_async_iter async def search_newgrounds_songs_on_page ( self , query : str , page : int = DEFAULT_PAGE ) -> AsyncIterator [ Song ]: models = await self . session . search_newgrounds_songs_on_page ( query = query , page = page ) for model in models : yield Song . from_model ( model , custom = True , client = self ) @wrap_async_iter def search_newgrounds_songs ( self , query : str , pages : Iterable [ int ] = DEFAULT_PAGES ) -> AsyncIterator [ Song ]: return run_iterables ( ( self . search_newgrounds_songs_on_page ( query = query , page = page ) for page in pages ), ClientError , ) @wrap_async_iter async def search_newgrounds_users_on_page ( self , query : str , page : int = DEFAULT_PAGE ) -> AsyncIterator [ Author ]: data = await self . session . search_newgrounds_users_on_page ( query = query , page = page ) for part in data : yield Author . from_dict ( part , client = self ) # type: ignore @wrap_async_iter def search_newgrounds_users ( self , query : str , pages : Iterable [ int ] = DEFAULT_PAGES ) -> AsyncIterator [ Artist ]: return run_iterables ( ( self . search_newgrounds_users_on_page ( query = query , page = page ) for page in pages ), ClientError , ) @wrap_async_iter async def get_newgrounds_artist_songs_on_page ( self , artist : Artist , page : int = DEFAULT_PAGE ) -> AsyncIterator [ Song ]: models = await self . session . get_newgrounds_artist_songs_on_page ( name = name , page = page ) for model in models : yield Song . from_model ( model ) . attach_client ( self ) @wrap_async_iter def get_newgrounds_artist_songs ( self , artist : Artist , pages : Iterable [ int ] = DEFAULT_PAGES ) -> AsyncIterator [ Song ]: return run_iterables ( ( self . get_newgrounds_artist_songs_on_page ( artist = artist , page = page ) . unwrap () for page in pages ), ClientError , ) # handlers async def on_daily ( self , daily : Level ) -> None : \"\"\"Handles `daily` events. Arguments: daily: The daily level to handle. \"\"\" async def on_weekly ( self , weekly : Level ) -> None : \"\"\"Handles `weekly` events. Arguments: weekly: The weekly level to handle. \"\"\" async def on_rate ( self , level : Level ) -> None : \"\"\"Handles `rate` events. Arguments: level: The rated level to handle. \"\"\" async def on_level ( self , level : Level ) -> None : \"\"\"Handles `level` events. Arguments: level: The level to handle. \"\"\" async def on_user_level ( self , user : User , level : Level ) -> None : \"\"\"Handles `user_level` events. Arguments: user: The user to handle. level: The level to handle. \"\"\" async def on_message ( self , message : Message ) -> None : \"\"\"Handles `message` events. Arguments: message: The message to handle. \"\"\" async def on_friend_request ( self , friend_request : FriendRequest ) -> None : \"\"\"Handles `friend_request` events. Arguments: friend_request: The friend request to handle. \"\"\" async def on_level_comment ( self , level : Level , comment : LevelComment ) -> None : \"\"\"Handles `level_comment` events. Arguments: level: The level to handle. comment: The level comment to handle. \"\"\" async def on_daily_comment ( self , daily : Level , comment : LevelComment ) -> None : \"\"\"Handles `daily_comment` events. Arguments: daily: The daily level to handle. comment: The daily comment to handle. \"\"\" async def on_weekly_comment ( self , weekly : Level , comment : LevelComment ) -> None : \"\"\"Handles `weekly_comment` events. Arguments: weekly: The weekly level to handle. comment: The weekly comment to handle. \"\"\" async def on_user_comment ( self , user : User , comment : UserComment ) -> None : \"\"\"Handles `user_comment` events. Arguments: user: The user to handle. comment: The comment to handle. \"\"\" async def on_user_level_comment ( self , user : User , comment : LevelComment ) -> None : \"\"\"Handles `user_level_comment` events. Arguments: user: The user to handle. comment: The level comment to handle. \"\"\" # dispatchers async def dispatch_daily ( self , daily : Level ) -> None : \"\"\"Dispatches `daily` events via calling [`on_daily`][gd.client.Client.on_daily]. Arguments: daily: The daily level to dispatch. \"\"\" await self . on_daily ( daily ) async def dispatch_weekly ( self , weekly : Level ) -> None : \"\"\"Dispatches `weekly` events via calling [`on_weekly`][gd.client.Client.on_weekly]. Arguments: weekly: The weekly level to dispatch. \"\"\" await self . on_weekly ( weekly ) async def dispatch_rate ( self , level : Level ) -> None : \"\"\"Dispatches `rate` events via calling [`on_rate`][gd.client.Client.on_rate]. Arguments: level: The rated level to dispatch. \"\"\" await self . on_rate ( level ) async def dispatch_level ( self , level : Level ) -> None : \"\"\"Dispatches `level` events via calling [`on_level`][gd.client.Client.on_level]. Arguments: level: The level to dispatch. \"\"\" await self . on_level ( level ) async def dispatch_user_level ( self , user : User , level : Level ) -> None : \"\"\"Dispatches `user_level` events via calling [`on_user_level`][gd.client.Client.on_user_level]. Arguments: user: The user to dispatch. level: The level to dispatch. \"\"\" await self . on_user_level ( user , level ) async def dispatch_message ( self , message : Message ) -> None : \"\"\"Dispatches `message` events via calling [`on_message`][gd.client.Client.on_message]. Arguments: message: The message to dispatch. \"\"\" await self . on_message ( message ) async def dispatch_friend_request ( self , friend_request : FriendRequest ) -> None : \"\"\"Dispatches `friend_request` events via calling [`on_friend_request`][gd.client.Client.on_friend_request]. Arguments: friend_request: The friend request to dispatch. \"\"\" await self . on_friend_request ( friend_request ) async def dispatch_level_comment ( self , level : Level , comment : LevelComment ) -> None : \"\"\"Dispatches `level_comment` events via calling [`on_level_comment`][gd.client.Client.on_level_comment]. Arguments: level: The level to dispatch. comment: The level comment to dispatch. \"\"\" await self . on_level_comment ( level , comment ) async def dispatch_daily_comment ( self , daily : Level , comment : LevelComment ) -> None : \"\"\"Dispatches `level_comment` events via calling [`on_level_comment`][gd.client.Client.on_level_comment]. Arguments: level: The daily level to dispatch. comment: The daily comment to dispatch. \"\"\" await self . on_daily_comment ( daily , comment ) async def dispatch_weekly_comment ( self , weekly : Level , comment : LevelComment ) -> None : \"\"\"Dispatches `weekly_comment` events via calling [`on_weekly_comment`][gd.client.Client.on_weekly_comment]. Arguments: weekly: The weekly level to dispatch. comment: The weekly comment to dispatch. \"\"\" await self . on_weekly_comment ( weekly , comment ) async def dispatch_user_comment ( self , user : User , comment : UserComment ) -> None : \"\"\"Dispatches `user_comment` events via calling [`on_user_comment`][gd.client.Client.on_user_comment]. Arguments: user: The user to dispatch. comment: The comment to dispatch. \"\"\" await self . on_user_comment ( user , comment ) async def dispatch_user_level_comment ( self , user : User , comment : LevelComment ) -> None : \"\"\"Dispatches `user_level_comment` events via calling [`on_user_level_comment`][gd.client.Client.on_user_level_comment]. Arguments: user: The user to dispatch. comment: The level comment to dispatch. \"\"\" await self . on_user_level_comment ( user , comment ) def event ( self , function : F ) -> F : \"\"\"Registers an event handler. Example: ```python client = Client() DAILY = \"new daily! {daily.name} by {daily.creator.name} (ID: {daily.id}) @client.event async def on_daily(daily: Level) -> None: print(DAILY.format(daily=daily)) ``` Arguments: function: The function to register as an event handler. Returns: The function passed. \"\"\" set_attribute ( self , function . __name__ , function ) return function def listen_for_daily ( self , delay : float = DEFAULT_DELAY , reconnect : bool = DEFAULT_RECONNECT ) -> DailyListener : return self . add_listener ( DailyListener ( self , delay = delay , reconnect = reconnect )) def listen_for_weekly ( self , delay : float = DEFAULT_DELAY , reconnect : bool = DEFAULT_RECONNECT ) -> WeeklyListener : return self . add_listener ( WeeklyListener ( self , delay = delay , reconnect = reconnect )) def listen_for_rate ( self , pages_count : int = DEFAULT_PAGES_COUNT , delay : float = DEFAULT_DELAY , reconnect : bool = DEFAULT_RECONNECT , ) -> RateListener : return self . add_listener ( RateListener ( self , delay = delay , reconnect = reconnect , pages_count = pages_count ) ) def listen_for_level ( self , pages_count : int = DEFAULT_PAGES_COUNT , filters : Optional [ Filters ] = None , delay : float = DEFAULT_DELAY , reconnect : bool = DEFAULT_RECONNECT , ) -> LevelListener : if filters is None : filters = Filters () return self . add_listener ( LevelListener ( self , delay = delay , reconnect = reconnect , pages_count = pages_count , filters = filters , ) ) def listen_for_user_level ( self , account_id : Optional [ int ] = None , id : Optional [ int ] = None , name : Optional [ str ] = None , pages_count : int = DEFAULT_PAGES_COUNT , update : bool = DEFAULT_UPDATE , delay : float = DEFAULT_DELAY , reconnect : bool = DEFAULT_RECONNECT , ) -> UserLevelListener : return self . add_listener ( UserLevelListener ( self , delay = delay , reconnect = reconnect , account_id = account_id , id = id , name = name , pages_count = pages_count , update = update , ) ) def listen_for_message ( self , pages_count : int = DEFAULT_PAGES_COUNT , delay : float = DEFAULT_DELAY , reconnect : bool = DEFAULT_RECONNECT , ) -> MessageListener : return self . add_listener ( MessageListener ( self , delay = delay , reconnect = reconnect , pages_count = pages_count ) ) def listen_for_friend_request ( self , pages_count : int = DEFAULT_PAGES_COUNT , delay : float = DEFAULT_DELAY , reconnect : bool = DEFAULT_RECONNECT , ) -> FriendRequestListener : return self . add_listener ( FriendRequestListener ( self , delay = delay , reconnect = reconnect , pages_count = pages_count ) ) def listen_for_level_comment ( self , level_id : int , pages_count : int = DEFAULT_PAGES_COUNT , count : int = DEFAULT_COUNT , update : bool = DEFAULT_UPDATE , delay : float = DEFAULT_DELAY , reconnect : bool = DEFAULT_RECONNECT , ) -> LevelCommentListener : return self . add_listener ( LevelCommentListener ( self , delay = delay , reconnect = reconnect , level_id = level_id , pages_count = pages_count , count = count , update = update , ) ) def listen_for_daily_comment ( self , pages_count : int = DEFAULT_PAGES_COUNT , count : int = DEFAULT_COUNT , update : bool = DEFAULT_UPDATE , delay : float = DEFAULT_DELAY , reconnect : bool = DEFAULT_RECONNECT , ) -> DailyCommentListener : return self . add_listener ( DailyCommentListener ( self , delay = delay , reconnect = reconnect , pages_count = pages_count , count = count , update = update , ) ) def listen_for_weekly_comment ( self , pages_count : int = DEFAULT_PAGES_COUNT , count : int = DEFAULT_COUNT , update : bool = DEFAULT_UPDATE , delay : float = DEFAULT_DELAY , reconnect : bool = DEFAULT_RECONNECT , ) -> WeeklyCommentListener : return self . add_listener ( WeeklyCommentListener ( self , delay = delay , reconnect = reconnect , pages_count = pages_count , count = count , update = update , ) ) def listen_for_user_comment ( self , account_id : Optional [ int ] = None , id : Optional [ int ] = None , name : Optional [ str ] = None , update : bool = DEFAULT_UPDATE , delay : float = DEFAULT_DELAY , reconnect : bool = DEFAULT_RECONNECT , ) -> UserCommentListener : return self . add_listener ( UserCommentListener ( self , delay = delay , reconnect = reconnect , account_id = account_id , id = id , name = name , update = update , ) ) def listen_for_user_level_comment ( self , account_id : Optional [ int ] = None , id : Optional [ int ] = None , name : Optional [ str ] = None , update : bool = DEFAULT_UPDATE , delay : float = DEFAULT_DELAY , reconnect : bool = DEFAULT_RECONNECT , ) -> UserLevelCommentListener : return self . add_listener ( UserLevelCommentListener ( self , delay = delay , reconnect = reconnect , account_id = account_id , id = id , name = name , update = update , ) ) # listeners def add_listener ( self , listener : L ) -> L : self . check_controller () self . _listeners = ( * self . _listeners , listener ) return listener def clear_listeners ( self ) -> None : self . check_controller () self . _listeners = () def remove_listener ( self , listener : Listener ) -> bool : self . check_controller () listeners = self . _listeners length = len ( listeners ) self . _listeners = listeners = tuple ( present_listener for present_listener in listeners if present_listener is not listener ) return len ( listeners ) < length # controllers def check_controller ( self ) -> None : if self . _controller is not None : raise RuntimeError ( CONTROLLER_ALREADY_CREATED ) def create_controller ( self ) -> Controller : self . check_controller () self . _controller = controller = Controller ( self . _listeners ) return controller","title":"Client"},{"location":"reference/client/#gd.client.Client.session","text":"The session of the client.","title":"session"},{"location":"reference/client/#gd.client.Client.credentials","text":"The credentials of the client.","title":"credentials"},{"location":"reference/client/#gd.client.Client.database_unchecked","text":"The database of the client.","title":"database_unchecked"},{"location":"reference/client/#gd.client.Client.load_after_post","text":"Whether to load items after posting them.","title":"load_after_post"},{"location":"reference/client/#gd.client.Client.account_id","text":"The account ID of the client.","title":"account_id"},{"location":"reference/client/#gd.client.Client.id","text":"The user ID of the client.","title":"id"},{"location":"reference/client/#gd.client.Client.name","text":"The name of the client.","title":"name"},{"location":"reference/client/#gd.client.Client.password","text":"The password of the client.","title":"password"},{"location":"reference/client/#gd.client.Client.http","text":"The HTTPClient used by the client session.","title":"http"},{"location":"reference/client/#gd.client.Client.encoded_password","text":"The encoded password of the client.","title":"encoded_password"},{"location":"reference/client/#gd.client.Client.user","text":"The user representing the client.","title":"user"},{"location":"reference/client/#gd.client.Client.is_logged_in","text":"Checks if the client is logged in. Returns: Type Description bool Whether the client is logged in. Source code in gd/client.py 218 219 220 221 222 223 224 def is_logged_in ( self ) -> bool : \"\"\"Checks if the client is logged in. Returns: Whether the client is logged in. \"\"\" return self . credentials . is_loaded ()","title":"is_logged_in()"},{"location":"reference/client/#gd.client.Client.ping","text":"Pings the Geometry Dash server. Returns: Type Description timedelta The timedelta representing the latency. Source code in gd/client.py 265 266 267 268 269 270 271 async def ping ( self ) -> timedelta : \"\"\"Pings the Geometry Dash server. Returns: The [`timedelta`][datetime.timedelta] representing the latency. \"\"\" return await self . ping_url ( self . http . url )","title":"ping()"},{"location":"reference/client/#gd.client.Client.ping_url","text":"Pings the given url . Returns: Type Description timedelta The timedelta representing the latency. Source code in gd/client.py 273 274 275 276 277 278 279 async def ping_url ( self , url : URLString ) -> timedelta : \"\"\"Pings the given `url`. Returns: The [`timedelta`][datetime.timedelta] representing the latency. \"\"\" return await self . session . ping ( url )","title":"ping_url()"},{"location":"reference/client/#gd.client.Client.logout","text":"Performs the logout. Source code in gd/client.py 281 282 283 async def logout ( self ) -> None : \"\"\"Performs the logout.\"\"\" self . reset_items ()","title":"logout()"},{"location":"reference/client/#gd.client.Client.login","text":"Performs the login. This function returns a context manager that can be used for temporarily logging in: async with client . login ( name , password ): assert client . is_logged_in () assert not client . is_logged_in () Returns: Type Description LoginContextManager [ C ] The LoginContextManager for handling login process. Source code in gd/client.py 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 def login ( self : C , name : str , password : str ) -> LoginContextManager [ C ]: \"\"\"Performs the login. This function returns a context manager that can be used for temporarily logging in: ```python async with client.login(name, password): assert client.is_logged_in() assert not client.is_logged_in() ``` Returns: The [`LoginContextManager`][gd.client.LoginContextManager] for handling login process. \"\"\" return LoginContextManager ( self , name , password )","title":"login()"},{"location":"reference/client/#gd.client.Client.unsafe_login","text":"Performs the unsafe login. Unsafe means that the credentials are not confirmed. This function returns a context manager that can be used for temporarily logging in: async with client . unsafe_login ( name , password ): assert client . is_logged_in () assert not client . is_logged_in () Returns: Type Description UnsafeLoginContextManager [ C ] The UnsafeLoginContextManager for handling login process. Source code in gd/client.py 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 def unsafe_login ( self : C , name : str , password : str ) -> UnsafeLoginContextManager [ C ]: \"\"\"Performs the *unsafe* login. *Unsafe* means that the credentials are not confirmed. This function returns a context manager that can be used for temporarily logging in: ```python async with client.unsafe_login(name, password): assert client.is_logged_in() assert not client.is_logged_in() ``` Returns: The [`UnsafeLoginContextManager`][gd.client.UnsafeLoginContextManager] for handling login process. \"\"\" return UnsafeLoginContextManager ( self , name , password )","title":"unsafe_login()"},{"location":"reference/client/#gd.client.Client.load","text":"Loads the save from the cloud, saving it in the database attribute. Note This function requires the client to be logged in. Returns: Type Description Database The Database loaded. Source code in gd/client.py 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 @check_login async def load ( self ) -> Database : \"\"\"Loads the save from the cloud, saving it in the [`database`][gd.client.Client.database] attribute. Note: This function requires the client to be logged in. Returns: The [`Database`][gd.api.database.Database] loaded. \"\"\" database = await self . session . load ( account_id = self . account_id , name = self . name , password = self . password ) self . database = database return database","title":"load()"},{"location":"reference/client/#gd.client.Client.save","text":"Saves the the database to the cloud, optionally fetching it from the database attribute. Note This function requires the client to be logged in. Source code in gd/client.py 351 352 353 354 355 356 357 358 359 360 361 362 363 364 @check_login async def save ( self , database : Optional [ Database ] = None ) -> None : \"\"\"Saves the the `database` to the cloud, optionally fetching it from the [`database`][gd.client.Client.database] attribute. Note: This function requires the client to be logged in. \"\"\" if database is None : database = self . database await self . session . save ( database , account_id = self . account_id , name = self . name , password = self . password )","title":"save()"},{"location":"reference/client/#gd.client.Client.get_self","text":"Gets the user representing this client. This is a shorthand for: await client . user . get ( simple = simple ) See User.get for more information. Note This function requires the client to be logged in. Parameters: Name Type Description Default simple bool Whether to fetch simple information. DEFAULT_SIMPLE Returns: Type Description User The User representing the client. Source code in gd/client.py 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 @check_login async def get_self ( self , simple : bool = DEFAULT_SIMPLE ) -> User : \"\"\"Gets the user representing this client. This is a shorthand for: ```python await client.user.get(simple=simple) ``` See [`User.get`][gd.user.User.get] for more information. Note: This function requires the client to be logged in. Arguments: simple: Whether to fetch simple information. Returns: The [`User`][gd.user.User] representing the client. \"\"\" return await self . user . get ( simple = simple )","title":"get_self()"},{"location":"reference/client/#gd.client.Client.get_user","text":"Fetches the user by account_id . Parameters: Name Type Description Default account_id int The account ID of the user to fetch. required simple bool Whether to fetch simple information only. DEFAULT_SIMPLE friend_state bool Whether to fetch friend state. DEFAULT_FRIEND_STATE Note friend_state requires the client to be logged in. Returns: Type Description User The User fetched. Source code in gd/client.py 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 async def get_user ( self , account_id : int , simple : bool = DEFAULT_SIMPLE , friend_state : bool = DEFAULT_FRIEND_STATE , ) -> User : \"\"\"Fetches the user by `account_id`. Arguments: account_id: The account ID of the user to fetch. simple: Whether to fetch simple information only. friend_state: Whether to fetch friend state. Note: `friend_state` requires the client to be logged in. Returns: The [`User`][gd.user.User] fetched. \"\"\" if friend_state : # if we need to fetch friend state check_client_login ( self ) profile_model = await self . session . get_user_profile ( # request profile account_id = account_id , client_account_id = self . account_id , encoded_password = self . encoded_password , ) else : # otherwise, simply request normally profile_model = await self . session . get_user_profile ( account_id = account_id ) if simple : # if only the profile is needed, return right away return User . from_profile_model ( profile_model ) . attach_client ( self ) search_model = await self . session . search_user ( profile_model . id ) # search by ID return User . from_search_user_and_profile_models ( search_model , profile_model ) . attach_client ( self )","title":"get_user()"},{"location":"reference/client/#gd.client.Client.on_daily","text":"Handles daily events. Parameters: Name Type Description Default daily Level The daily level to handle. required Source code in gd/client.py 1422 1423 1424 1425 1426 1427 async def on_daily ( self , daily : Level ) -> None : \"\"\"Handles `daily` events. Arguments: daily: The daily level to handle. \"\"\"","title":"on_daily()"},{"location":"reference/client/#gd.client.Client.on_weekly","text":"Handles weekly events. Parameters: Name Type Description Default weekly Level The weekly level to handle. required Source code in gd/client.py 1429 1430 1431 1432 1433 1434 async def on_weekly ( self , weekly : Level ) -> None : \"\"\"Handles `weekly` events. Arguments: weekly: The weekly level to handle. \"\"\"","title":"on_weekly()"},{"location":"reference/client/#gd.client.Client.on_rate","text":"Handles rate events. Parameters: Name Type Description Default level Level The rated level to handle. required Source code in gd/client.py 1436 1437 1438 1439 1440 1441 async def on_rate ( self , level : Level ) -> None : \"\"\"Handles `rate` events. Arguments: level: The rated level to handle. \"\"\"","title":"on_rate()"},{"location":"reference/client/#gd.client.Client.on_level","text":"Handles level events. Parameters: Name Type Description Default level Level The level to handle. required Source code in gd/client.py 1443 1444 1445 1446 1447 1448 async def on_level ( self , level : Level ) -> None : \"\"\"Handles `level` events. Arguments: level: The level to handle. \"\"\"","title":"on_level()"},{"location":"reference/client/#gd.client.Client.on_user_level","text":"Handles user_level events. Parameters: Name Type Description Default user User The user to handle. required level Level The level to handle. required Source code in gd/client.py 1450 1451 1452 1453 1454 1455 1456 async def on_user_level ( self , user : User , level : Level ) -> None : \"\"\"Handles `user_level` events. Arguments: user: The user to handle. level: The level to handle. \"\"\"","title":"on_user_level()"},{"location":"reference/client/#gd.client.Client.on_message","text":"Handles message events. Parameters: Name Type Description Default message Message The message to handle. required Source code in gd/client.py 1458 1459 1460 1461 1462 1463 async def on_message ( self , message : Message ) -> None : \"\"\"Handles `message` events. Arguments: message: The message to handle. \"\"\"","title":"on_message()"},{"location":"reference/client/#gd.client.Client.on_friend_request","text":"Handles friend_request events. Parameters: Name Type Description Default friend_request FriendRequest The friend request to handle. required Source code in gd/client.py 1465 1466 1467 1468 1469 1470 async def on_friend_request ( self , friend_request : FriendRequest ) -> None : \"\"\"Handles `friend_request` events. Arguments: friend_request: The friend request to handle. \"\"\"","title":"on_friend_request()"},{"location":"reference/client/#gd.client.Client.on_level_comment","text":"Handles level_comment events. Parameters: Name Type Description Default level Level The level to handle. required comment LevelComment The level comment to handle. required Source code in gd/client.py 1472 1473 1474 1475 1476 1477 1478 async def on_level_comment ( self , level : Level , comment : LevelComment ) -> None : \"\"\"Handles `level_comment` events. Arguments: level: The level to handle. comment: The level comment to handle. \"\"\"","title":"on_level_comment()"},{"location":"reference/client/#gd.client.Client.on_daily_comment","text":"Handles daily_comment events. Parameters: Name Type Description Default daily Level The daily level to handle. required comment LevelComment The daily comment to handle. required Source code in gd/client.py 1480 1481 1482 1483 1484 1485 1486 async def on_daily_comment ( self , daily : Level , comment : LevelComment ) -> None : \"\"\"Handles `daily_comment` events. Arguments: daily: The daily level to handle. comment: The daily comment to handle. \"\"\"","title":"on_daily_comment()"},{"location":"reference/client/#gd.client.Client.on_weekly_comment","text":"Handles weekly_comment events. Parameters: Name Type Description Default weekly Level The weekly level to handle. required comment LevelComment The weekly comment to handle. required Source code in gd/client.py 1488 1489 1490 1491 1492 1493 1494 async def on_weekly_comment ( self , weekly : Level , comment : LevelComment ) -> None : \"\"\"Handles `weekly_comment` events. Arguments: weekly: The weekly level to handle. comment: The weekly comment to handle. \"\"\"","title":"on_weekly_comment()"},{"location":"reference/client/#gd.client.Client.on_user_comment","text":"Handles user_comment events. Parameters: Name Type Description Default user User The user to handle. required comment UserComment The comment to handle. required Source code in gd/client.py 1496 1497 1498 1499 1500 1501 1502 async def on_user_comment ( self , user : User , comment : UserComment ) -> None : \"\"\"Handles `user_comment` events. Arguments: user: The user to handle. comment: The comment to handle. \"\"\"","title":"on_user_comment()"},{"location":"reference/client/#gd.client.Client.on_user_level_comment","text":"Handles user_level_comment events. Parameters: Name Type Description Default user User The user to handle. required comment LevelComment The level comment to handle. required Source code in gd/client.py 1504 1505 1506 1507 1508 1509 1510 async def on_user_level_comment ( self , user : User , comment : LevelComment ) -> None : \"\"\"Handles `user_level_comment` events. Arguments: user: The user to handle. comment: The level comment to handle. \"\"\"","title":"on_user_level_comment()"},{"location":"reference/client/#gd.client.Client.dispatch_daily","text":"Dispatches daily events via calling on_daily . Parameters: Name Type Description Default daily Level The daily level to dispatch. required Source code in gd/client.py 1514 1515 1516 1517 1518 1519 1520 async def dispatch_daily ( self , daily : Level ) -> None : \"\"\"Dispatches `daily` events via calling [`on_daily`][gd.client.Client.on_daily]. Arguments: daily: The daily level to dispatch. \"\"\" await self . on_daily ( daily )","title":"dispatch_daily()"},{"location":"reference/client/#gd.client.Client.dispatch_weekly","text":"Dispatches weekly events via calling on_weekly . Parameters: Name Type Description Default weekly Level The weekly level to dispatch. required Source code in gd/client.py 1522 1523 1524 1525 1526 1527 1528 async def dispatch_weekly ( self , weekly : Level ) -> None : \"\"\"Dispatches `weekly` events via calling [`on_weekly`][gd.client.Client.on_weekly]. Arguments: weekly: The weekly level to dispatch. \"\"\" await self . on_weekly ( weekly )","title":"dispatch_weekly()"},{"location":"reference/client/#gd.client.Client.dispatch_rate","text":"Dispatches rate events via calling on_rate . Parameters: Name Type Description Default level Level The rated level to dispatch. required Source code in gd/client.py 1530 1531 1532 1533 1534 1535 1536 async def dispatch_rate ( self , level : Level ) -> None : \"\"\"Dispatches `rate` events via calling [`on_rate`][gd.client.Client.on_rate]. Arguments: level: The rated level to dispatch. \"\"\" await self . on_rate ( level )","title":"dispatch_rate()"},{"location":"reference/client/#gd.client.Client.dispatch_level","text":"Dispatches level events via calling on_level . Parameters: Name Type Description Default level Level The level to dispatch. required Source code in gd/client.py 1538 1539 1540 1541 1542 1543 1544 async def dispatch_level ( self , level : Level ) -> None : \"\"\"Dispatches `level` events via calling [`on_level`][gd.client.Client.on_level]. Arguments: level: The level to dispatch. \"\"\" await self . on_level ( level )","title":"dispatch_level()"},{"location":"reference/client/#gd.client.Client.dispatch_user_level","text":"Dispatches user_level events via calling on_user_level . Parameters: Name Type Description Default user User The user to dispatch. required level Level The level to dispatch. required Source code in gd/client.py 1546 1547 1548 1549 1550 1551 1552 1553 1554 async def dispatch_user_level ( self , user : User , level : Level ) -> None : \"\"\"Dispatches `user_level` events via calling [`on_user_level`][gd.client.Client.on_user_level]. Arguments: user: The user to dispatch. level: The level to dispatch. \"\"\" await self . on_user_level ( user , level )","title":"dispatch_user_level()"},{"location":"reference/client/#gd.client.Client.dispatch_message","text":"Dispatches message events via calling on_message . Parameters: Name Type Description Default message Message The message to dispatch. required Source code in gd/client.py 1556 1557 1558 1559 1560 1561 1562 async def dispatch_message ( self , message : Message ) -> None : \"\"\"Dispatches `message` events via calling [`on_message`][gd.client.Client.on_message]. Arguments: message: The message to dispatch. \"\"\" await self . on_message ( message )","title":"dispatch_message()"},{"location":"reference/client/#gd.client.Client.dispatch_friend_request","text":"Dispatches friend_request events via calling on_friend_request . Parameters: Name Type Description Default friend_request FriendRequest The friend request to dispatch. required Source code in gd/client.py 1564 1565 1566 1567 1568 1569 1570 1571 async def dispatch_friend_request ( self , friend_request : FriendRequest ) -> None : \"\"\"Dispatches `friend_request` events via calling [`on_friend_request`][gd.client.Client.on_friend_request]. Arguments: friend_request: The friend request to dispatch. \"\"\" await self . on_friend_request ( friend_request )","title":"dispatch_friend_request()"},{"location":"reference/client/#gd.client.Client.dispatch_level_comment","text":"Dispatches level_comment events via calling on_level_comment . Parameters: Name Type Description Default level Level The level to dispatch. required comment LevelComment The level comment to dispatch. required Source code in gd/client.py 1573 1574 1575 1576 1577 1578 1579 1580 1581 async def dispatch_level_comment ( self , level : Level , comment : LevelComment ) -> None : \"\"\"Dispatches `level_comment` events via calling [`on_level_comment`][gd.client.Client.on_level_comment]. Arguments: level: The level to dispatch. comment: The level comment to dispatch. \"\"\" await self . on_level_comment ( level , comment )","title":"dispatch_level_comment()"},{"location":"reference/client/#gd.client.Client.dispatch_daily_comment","text":"Dispatches level_comment events via calling on_level_comment . Parameters: Name Type Description Default level The daily level to dispatch. required comment LevelComment The daily comment to dispatch. required Source code in gd/client.py 1583 1584 1585 1586 1587 1588 1589 1590 1591 async def dispatch_daily_comment ( self , daily : Level , comment : LevelComment ) -> None : \"\"\"Dispatches `level_comment` events via calling [`on_level_comment`][gd.client.Client.on_level_comment]. Arguments: level: The daily level to dispatch. comment: The daily comment to dispatch. \"\"\" await self . on_daily_comment ( daily , comment )","title":"dispatch_daily_comment()"},{"location":"reference/client/#gd.client.Client.dispatch_weekly_comment","text":"Dispatches weekly_comment events via calling on_weekly_comment . Parameters: Name Type Description Default weekly Level The weekly level to dispatch. required comment LevelComment The weekly comment to dispatch. required Source code in gd/client.py 1593 1594 1595 1596 1597 1598 1599 1600 1601 async def dispatch_weekly_comment ( self , weekly : Level , comment : LevelComment ) -> None : \"\"\"Dispatches `weekly_comment` events via calling [`on_weekly_comment`][gd.client.Client.on_weekly_comment]. Arguments: weekly: The weekly level to dispatch. comment: The weekly comment to dispatch. \"\"\" await self . on_weekly_comment ( weekly , comment )","title":"dispatch_weekly_comment()"},{"location":"reference/client/#gd.client.Client.dispatch_user_comment","text":"Dispatches user_comment events via calling on_user_comment . Parameters: Name Type Description Default user User The user to dispatch. required comment UserComment The comment to dispatch. required Source code in gd/client.py 1603 1604 1605 1606 1607 1608 1609 1610 1611 async def dispatch_user_comment ( self , user : User , comment : UserComment ) -> None : \"\"\"Dispatches `user_comment` events via calling [`on_user_comment`][gd.client.Client.on_user_comment]. Arguments: user: The user to dispatch. comment: The comment to dispatch. \"\"\" await self . on_user_comment ( user , comment )","title":"dispatch_user_comment()"},{"location":"reference/client/#gd.client.Client.dispatch_user_level_comment","text":"Dispatches user_level_comment events via calling on_user_level_comment . Parameters: Name Type Description Default user User The user to dispatch. required comment LevelComment The level comment to dispatch. required Source code in gd/client.py 1613 1614 1615 1616 1617 1618 1619 1620 1621 async def dispatch_user_level_comment ( self , user : User , comment : LevelComment ) -> None : \"\"\"Dispatches `user_level_comment` events via calling [`on_user_level_comment`][gd.client.Client.on_user_level_comment]. Arguments: user: The user to dispatch. comment: The level comment to dispatch. \"\"\" await self . on_user_level_comment ( user , comment )","title":"dispatch_user_level_comment()"},{"location":"reference/client/#gd.client.Client.event","text":"Registers an event handler. Example client = Client () DAILY = \"new daily! {daily.name} by {daily.creator.name} (ID: {daily.id} ) @client . event async def on_daily ( daily : Level ) -> None : print ( DAILY . format ( daily = daily )) Parameters: Name Type Description Default function F The function to register as an event handler. required Returns: Type Description F The function passed. Source code in gd/client.py 1623 1624 1625 1626 1627 1628 1629 1630 1631 1632 1633 1634 1635 1636 1637 1638 1639 1640 1641 1642 1643 1644 1645 def event ( self , function : F ) -> F : \"\"\"Registers an event handler. Example: ```python client = Client() DAILY = \"new daily! {daily.name} by {daily.creator.name} (ID: {daily.id}) @client.event async def on_daily(daily: Level) -> None: print(DAILY.format(daily=daily)) ``` Arguments: function: The function to register as an event handler. Returns: The function passed. \"\"\" set_attribute ( self , function . __name__ , function ) return function","title":"event()"},{"location":"reference/tasks/","text":"..., adapted from discord.py library. ExponentialBackoff An implementation of the exponential backoff algorithm. Provides a convenient interface to implement an exponential backoff for reconnecting or retrying transmissions in a distributed network. Once instantiated, the delay method will return the next interval to wait for when retrying a connection or transmission. The maximum delay increases exponentially with each retry up to a maximum of \\(m \\cdot b^l\\) (where \\(m\\) is multiply , \\(b\\) is base and \\(l\\) is limit ), and is reset if no more attempts are needed in a period of \\(m \\cdot b^{l + 1}\\) seconds. Source code in gd/tasks.py 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 @define () class ExponentialBackoff : r \"\"\"An implementation of the *exponential backoff* algorithm. Provides a convenient interface to implement an exponential backoff for reconnecting or retrying transmissions in a distributed network. Once instantiated, the delay method will return the next interval to wait for when retrying a connection or transmission. The maximum delay increases exponentially with each retry up to a maximum of $m \\cdot b^l$ (where $m$ is `multiply`, $b$ is `base` and $l$ is `limit`), and is reset if no more attempts are needed in a period of $m \\cdot b^{l + 1}$ seconds. \"\"\" multiply : float = field ( default = DEFAULT_MULTIPLY ) base : float = field ( default = DEFAULT_BASE ) limit : int = field ( default = DEFAULT_LIMIT ) _clock : Clock = field ( default = clock ) _exponent : int = field ( default = 0 , init = False ) _last_called : float = field ( init = False ) _reset_delta : float = field ( init = False ) @_last_called . default def default_last_called ( self ) -> float : return self . _clock () @_reset_delta . default def default_reset_delta ( self ) -> float : return self . multiply * pow ( self . base , self . limit + 1 ) def delay ( self ) -> float : r \"\"\"Computes the next delay. Returns the next delay to wait according to the exponential backoff algorithm. This is a value between $0$ and $m \\cdot b^e$ where $e$ (`exponent`) starts off at $0$ and is incremented at every invocation of this method up to a maximum of $l$ (`limit`). If a period of more than $m \\cdot b^{l + 1}$ has passed since the last retry, the `exponent` ($e$) is reset to $0$. \"\"\" called = self . _clock () interval = called - self . _last_called self . _last_called = called if interval > self . _reset_delta : self . _exponent = 0 if self . _exponent < self . limit : self . _exponent += 1 return uniform_to ( self . multiply * pow ( self . base , self . _exponent )) delay () -> float Computes the next delay. Returns the next delay to wait according to the exponential backoff algorithm. This is a value between \\(0\\) and \\(m \\cdot b^e\\) where \\(e\\) ( exponent ) starts off at \\(0\\) and is incremented at every invocation of this method up to a maximum of \\(l\\) ( limit ). If a period of more than \\(m \\cdot b^{l + 1}\\) has passed since the last retry, the exponent ( \\(e\\) ) is reset to \\(0\\) . Source code in gd/tasks.py 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 def delay ( self ) -> float : r \"\"\"Computes the next delay. Returns the next delay to wait according to the exponential backoff algorithm. This is a value between $0$ and $m \\cdot b^e$ where $e$ (`exponent`) starts off at $0$ and is incremented at every invocation of this method up to a maximum of $l$ (`limit`). If a period of more than $m \\cdot b^{l + 1}$ has passed since the last retry, the `exponent` ($e$) is reset to $0$. \"\"\" called = self . _clock () interval = called - self . _last_called self . _last_called = called if interval > self . _reset_delta : self . _exponent = 0 if self . _exponent < self . limit : self . _exponent += 1 return uniform_to ( self . multiply * pow ( self . base , self . _exponent )) Loop Bases: Generic [ P ] A background task helper that abstracts the loop and reconnection logic. The main interface to create this is through loop . Source code in gd/tasks.pydefine () class Loop ( Generic [ P ]): \"\"\"A background task helper that abstracts the loop and reconnection logic. The main interface to create this is through [`loop`][gd.tasks.loop]. \"\"\" function : Callable [ P , Awaitable [ None ]] = field () delay : float = field ( default = DEFAULT_DELAY ) count : Optional [ int ] = field ( default = None ) reconnect : bool = field ( default = DEFAULT_RECONNECT ) _task : Optional [ Task [ None ]] = field ( default = None , init = False ) _current_count : int = field ( default = 0 , init = False ) _error_types : DynamicTuple [ Type [ AnyException ]] = field ( default = ( OSError , GDError , ClientError , TimeoutError ), init = False , ) _is_being_cancelled : bool = field ( default = False , init = False ) _has_failed : bool = field ( default = False , init = False ) _stop_next_iteration : bool = field ( default = False , init = False ) _injected : Optional [ Any ] = field ( default = None , init = False ) _before_loop : Optional [ LoopFunction [ Any ]] = field ( default = None , init = False ) _after_loop : Optional [ LoopFunction [ Any ]] = field ( default = None , init = False ) async def _call_before_loop ( self ) -> None : before_loop = self . _before_loop if before_loop is None : return injected = self . _injected if injected is None : await before_loop () # type: ignore else : await before_loop ( injected ) # type: ignore async def _call_after_loop ( self ) -> None : after_loop = self . _after_loop if after_loop is None : return injected = self . _injected if injected is None : await after_loop () # type: ignore else : await after_loop ( injected ) # type: ignore async def _loop ( self , * args : P . args , ** kwargs : P . kwargs ) -> None : backoff = ExponentialBackoff () await self . _call_before_loop () try : while True : try : await self . function ( * args , ** kwargs ) except self . _error_types : if not self . reconnect : raise await sleep ( backoff . delay ()) else : if self . _stop_next_iteration : return self . _current_count += 1 if self . _current_count == self . count : break await sleep ( self . delay ) except CancelledError : self . _is_being_cancelled = True raise except Exception : self . _has_failed = True raise finally : await self . _call_after_loop () self . _current_count = 0 self . _is_being_cancelled = False self . _has_failed = False self . _stop_next_iteration = False def __get__ ( self : L , instance : Optional [ S ], type : Optional [ Type [ S ]] = None ) -> L : if instance is None : return self self . _injected = instance return self @property def current_count ( self ) -> int : return self . _current_count def start ( self , * args : Any , ** kwargs : Any ) -> Task [ None ]: task = self . _task if task is not None and not task . done (): raise RuntimeError ( TASK_ALREADY_LAUNCHED ) injected = self . _injected if injected is not None : args = ( injected , * args ) self . _task = task = get_event_loop () . create_task ( self . _loop ( * args , ** kwargs )) return task def stop ( self ) -> None : task = self . _task if task is not None and not task . done (): self . _stop_next_iteration = True @property def _can_be_cancelled ( self ) -> bool : task = self . _task return not self . _is_being_cancelled and task is not None and not task . done () def cancel ( self ) -> None : if self . _can_be_cancelled : self . _task . cancel () # type: ignore def restart ( self , * args : Any , ** kwargs : Any ) -> None : def restart_when_over ( task : Task [ None ], * , args : DynamicTuple [ Any ] = args , kwargs : StringDict [ Any ] = kwargs , ) -> None : self . _task . remove_done_callback ( restart_when_over ) # type: ignore self . start ( * args , ** kwargs ) if self . _can_be_cancelled : self . _task . add_done_callback ( restart_when_over ) # type: ignore self . _task . cancel () # type: ignore def add_error_type ( self , error_type : Type [ AnyException ]) -> None : if not is_subclass ( error_type , AnyException ): raise TypeError # TODO: message? self . _error_types = ( * self . _error_types , error_type ) def clear_error_types ( self ) -> None : self . _error_types = () def remove_error_type ( self , error_type : Type [ AnyException ]) -> bool : error_types = self . _error_types length = len ( error_types ) self . _error_types = error_types = tuple ( present_error_type for present_error_type in error_types if present_error_type is not error_type ) return len ( error_types ) < length def is_being_cancelled ( self ) -> bool : return self . _is_being_cancelled def has_failed ( self ) -> bool : return self . _has_failed def before_loop ( self , loop_function : F ) -> F : self . _before_loop = loop_function return loop_function def after_loop ( self , loop_function : F ) -> F : self . _after_loop = loop_function return loop_function loop ( * , seconds : float = DEFAULT_SECONDS , minutes : float = DEFAULT_MINUTES , hours : float = DEFAULT_HOURS , days : float = DEFAULT_DAYS , count : Optional [ int ] = None , reconnect : bool = DEFAULT_RECONNECT ) -> Unary [ Callable [ P , Awaitable [ None ]], Loop [ P ]] ... Source code in gd/tasks.py 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 def loop ( * , seconds : float = DEFAULT_SECONDS , minutes : float = DEFAULT_MINUTES , hours : float = DEFAULT_HOURS , days : float = DEFAULT_DAYS , count : Optional [ int ] = None , reconnect : bool = DEFAULT_RECONNECT , ) -> Unary [ Callable [ P , Awaitable [ None ]], Loop [ P ]]: \"\"\"...\"\"\" delay = ( seconds + minutes * MINUTES_TO_SECONDS + hours * HOURS_TO_SECONDS + days * DAYS_TO_SECONDS ) def wrap ( function : Callable [ P , Awaitable [ None ]]) -> Loop [ P ]: return Loop ( function = function , delay = delay , count = count , reconnect = reconnect , ) return wrap","title":"Tasks"},{"location":"reference/tasks/#gd.tasks.ExponentialBackoff","text":"An implementation of the exponential backoff algorithm. Provides a convenient interface to implement an exponential backoff for reconnecting or retrying transmissions in a distributed network. Once instantiated, the delay method will return the next interval to wait for when retrying a connection or transmission. The maximum delay increases exponentially with each retry up to a maximum of \\(m \\cdot b^l\\) (where \\(m\\) is multiply , \\(b\\) is base and \\(l\\) is limit ), and is reset if no more attempts are needed in a period of \\(m \\cdot b^{l + 1}\\) seconds. Source code in gd/tasks.py 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 @define () class ExponentialBackoff : r \"\"\"An implementation of the *exponential backoff* algorithm. Provides a convenient interface to implement an exponential backoff for reconnecting or retrying transmissions in a distributed network. Once instantiated, the delay method will return the next interval to wait for when retrying a connection or transmission. The maximum delay increases exponentially with each retry up to a maximum of $m \\cdot b^l$ (where $m$ is `multiply`, $b$ is `base` and $l$ is `limit`), and is reset if no more attempts are needed in a period of $m \\cdot b^{l + 1}$ seconds. \"\"\" multiply : float = field ( default = DEFAULT_MULTIPLY ) base : float = field ( default = DEFAULT_BASE ) limit : int = field ( default = DEFAULT_LIMIT ) _clock : Clock = field ( default = clock ) _exponent : int = field ( default = 0 , init = False ) _last_called : float = field ( init = False ) _reset_delta : float = field ( init = False ) @_last_called . default def default_last_called ( self ) -> float : return self . _clock () @_reset_delta . default def default_reset_delta ( self ) -> float : return self . multiply * pow ( self . base , self . limit + 1 ) def delay ( self ) -> float : r \"\"\"Computes the next delay. Returns the next delay to wait according to the exponential backoff algorithm. This is a value between $0$ and $m \\cdot b^e$ where $e$ (`exponent`) starts off at $0$ and is incremented at every invocation of this method up to a maximum of $l$ (`limit`). If a period of more than $m \\cdot b^{l + 1}$ has passed since the last retry, the `exponent` ($e$) is reset to $0$. \"\"\" called = self . _clock () interval = called - self . _last_called self . _last_called = called if interval > self . _reset_delta : self . _exponent = 0 if self . _exponent < self . limit : self . _exponent += 1 return uniform_to ( self . multiply * pow ( self . base , self . _exponent ))","title":"ExponentialBackoff"},{"location":"reference/tasks/#gd.tasks.ExponentialBackoff.delay","text":"Computes the next delay. Returns the next delay to wait according to the exponential backoff algorithm. This is a value between \\(0\\) and \\(m \\cdot b^e\\) where \\(e\\) ( exponent ) starts off at \\(0\\) and is incremented at every invocation of this method up to a maximum of \\(l\\) ( limit ). If a period of more than \\(m \\cdot b^{l + 1}\\) has passed since the last retry, the exponent ( \\(e\\) ) is reset to \\(0\\) . Source code in gd/tasks.py 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 def delay ( self ) -> float : r \"\"\"Computes the next delay. Returns the next delay to wait according to the exponential backoff algorithm. This is a value between $0$ and $m \\cdot b^e$ where $e$ (`exponent`) starts off at $0$ and is incremented at every invocation of this method up to a maximum of $l$ (`limit`). If a period of more than $m \\cdot b^{l + 1}$ has passed since the last retry, the `exponent` ($e$) is reset to $0$. \"\"\" called = self . _clock () interval = called - self . _last_called self . _last_called = called if interval > self . _reset_delta : self . _exponent = 0 if self . _exponent < self . limit : self . _exponent += 1 return uniform_to ( self . multiply * pow ( self . base , self . _exponent ))","title":"delay()"},{"location":"reference/tasks/#gd.tasks.Loop","text":"Bases: Generic [ P ] A background task helper that abstracts the loop and reconnection logic. The main interface to create this is through loop . Source code in gd/tasks.pydefine () class Loop ( Generic [ P ]): \"\"\"A background task helper that abstracts the loop and reconnection logic. The main interface to create this is through [`loop`][gd.tasks.loop]. \"\"\" function : Callable [ P , Awaitable [ None ]] = field () delay : float = field ( default = DEFAULT_DELAY ) count : Optional [ int ] = field ( default = None ) reconnect : bool = field ( default = DEFAULT_RECONNECT ) _task : Optional [ Task [ None ]] = field ( default = None , init = False ) _current_count : int = field ( default = 0 , init = False ) _error_types : DynamicTuple [ Type [ AnyException ]] = field ( default = ( OSError , GDError , ClientError , TimeoutError ), init = False , ) _is_being_cancelled : bool = field ( default = False , init = False ) _has_failed : bool = field ( default = False , init = False ) _stop_next_iteration : bool = field ( default = False , init = False ) _injected : Optional [ Any ] = field ( default = None , init = False ) _before_loop : Optional [ LoopFunction [ Any ]] = field ( default = None , init = False ) _after_loop : Optional [ LoopFunction [ Any ]] = field ( default = None , init = False ) async def _call_before_loop ( self ) -> None : before_loop = self . _before_loop if before_loop is None : return injected = self . _injected if injected is None : await before_loop () # type: ignore else : await before_loop ( injected ) # type: ignore async def _call_after_loop ( self ) -> None : after_loop = self . _after_loop if after_loop is None : return injected = self . _injected if injected is None : await after_loop () # type: ignore else : await after_loop ( injected ) # type: ignore async def _loop ( self , * args : P . args , ** kwargs : P . kwargs ) -> None : backoff = ExponentialBackoff () await self . _call_before_loop () try : while True : try : await self . function ( * args , ** kwargs ) except self . _error_types : if not self . reconnect : raise await sleep ( backoff . delay ()) else : if self . _stop_next_iteration : return self . _current_count += 1 if self . _current_count == self . count : break await sleep ( self . delay ) except CancelledError : self . _is_being_cancelled = True raise except Exception : self . _has_failed = True raise finally : await self . _call_after_loop () self . _current_count = 0 self . _is_being_cancelled = False self . _has_failed = False self . _stop_next_iteration = False def __get__ ( self : L , instance : Optional [ S ], type : Optional [ Type [ S ]] = None ) -> L : if instance is None : return self self . _injected = instance return self @property def current_count ( self ) -> int : return self . _current_count def start ( self , * args : Any , ** kwargs : Any ) -> Task [ None ]: task = self . _task if task is not None and not task . done (): raise RuntimeError ( TASK_ALREADY_LAUNCHED ) injected = self . _injected if injected is not None : args = ( injected , * args ) self . _task = task = get_event_loop () . create_task ( self . _loop ( * args , ** kwargs )) return task def stop ( self ) -> None : task = self . _task if task is not None and not task . done (): self . _stop_next_iteration = True @property def _can_be_cancelled ( self ) -> bool : task = self . _task return not self . _is_being_cancelled and task is not None and not task . done () def cancel ( self ) -> None : if self . _can_be_cancelled : self . _task . cancel () # type: ignore def restart ( self , * args : Any , ** kwargs : Any ) -> None : def restart_when_over ( task : Task [ None ], * , args : DynamicTuple [ Any ] = args , kwargs : StringDict [ Any ] = kwargs , ) -> None : self . _task . remove_done_callback ( restart_when_over ) # type: ignore self . start ( * args , ** kwargs ) if self . _can_be_cancelled : self . _task . add_done_callback ( restart_when_over ) # type: ignore self . _task . cancel () # type: ignore def add_error_type ( self , error_type : Type [ AnyException ]) -> None : if not is_subclass ( error_type , AnyException ): raise TypeError # TODO: message? self . _error_types = ( * self . _error_types , error_type ) def clear_error_types ( self ) -> None : self . _error_types = () def remove_error_type ( self , error_type : Type [ AnyException ]) -> bool : error_types = self . _error_types length = len ( error_types ) self . _error_types = error_types = tuple ( present_error_type for present_error_type in error_types if present_error_type is not error_type ) return len ( error_types ) < length def is_being_cancelled ( self ) -> bool : return self . _is_being_cancelled def has_failed ( self ) -> bool : return self . _has_failed def before_loop ( self , loop_function : F ) -> F : self . _before_loop = loop_function return loop_function def after_loop ( self , loop_function : F ) -> F : self . _after_loop = loop_function return loop_function","title":"Loop"},{"location":"reference/tasks/#gd.tasks.loop","text":"... Source code in gd/tasks.py 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 def loop ( * , seconds : float = DEFAULT_SECONDS , minutes : float = DEFAULT_MINUTES , hours : float = DEFAULT_HOURS , days : float = DEFAULT_DAYS , count : Optional [ int ] = None , reconnect : bool = DEFAULT_RECONNECT , ) -> Unary [ Callable [ P , Awaitable [ None ]], Loop [ P ]]: \"\"\"...\"\"\" delay = ( seconds + minutes * MINUTES_TO_SECONDS + hours * HOURS_TO_SECONDS + days * DAYS_TO_SECONDS ) def wrap ( function : Callable [ P , Awaitable [ None ]]) -> Loop [ P ]: return Loop ( function = function , delay = delay , count = count , reconnect = reconnect , ) return wrap","title":"loop()"}]}